
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080027b8  080027b8  000037b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027dc  080027dc  00004028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080027dc  080027dc  00004028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080027dc  080027dc  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027dc  080027dc  000037dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027e0  080027e0  000037e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080027e4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e0  20000028  0800280c  00004028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  0800280c  00004108  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008583  00000000  00000000  00004051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b74  00000000  00000000  0000c5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0000e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b6  00000000  00000000  0000eb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fa3  00000000  00000000  0000f31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbd7  00000000  00000000  000252c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082606  00000000  00000000  00030e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b349e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000283c  00000000  00000000  000b34e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000b5d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080027a0 	.word	0x080027a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080027a0 	.word	0x080027a0

0800014c <displayLED_YELLOW>:
 *      Author: khanh
 */

#include "display_mode.h"

void displayLED_YELLOW(int IS_ON, int index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	switch (index){
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	2b00      	cmp	r3, #0
 800015a:	d003      	beq.n	8000164 <displayLED_YELLOW+0x18>
 800015c:	683b      	ldr	r3, [r7, #0]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d00f      	beq.n	8000182 <displayLED_YELLOW+0x36>
	case 1:
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_YELLOW_2,GPIO_PIN_RESET);
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_YELLOW_2, GPIO_PIN_SET);
		break;
	}
}
 8000162:	e01f      	b.n	80001a4 <displayLED_YELLOW+0x58>
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_YELLOW_1, GPIO_PIN_RESET);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b01      	cmp	r3, #1
 8000168:	d105      	bne.n	8000176 <displayLED_YELLOW+0x2a>
 800016a:	2200      	movs	r2, #0
 800016c:	2120      	movs	r1, #32
 800016e:	480f      	ldr	r0, [pc, #60]	@ (80001ac <displayLED_YELLOW+0x60>)
 8000170:	f001 faff 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 8000174:	e016      	b.n	80001a4 <displayLED_YELLOW+0x58>
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_YELLOW_1, GPIO_PIN_SET);
 8000176:	2201      	movs	r2, #1
 8000178:	2120      	movs	r1, #32
 800017a:	480c      	ldr	r0, [pc, #48]	@ (80001ac <displayLED_YELLOW+0x60>)
 800017c:	f001 faf9 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 8000180:	e010      	b.n	80001a4 <displayLED_YELLOW+0x58>
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_YELLOW_2,GPIO_PIN_RESET);
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d106      	bne.n	8000196 <displayLED_YELLOW+0x4a>
 8000188:	2200      	movs	r2, #0
 800018a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800018e:	4807      	ldr	r0, [pc, #28]	@ (80001ac <displayLED_YELLOW+0x60>)
 8000190:	f001 faef 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 8000194:	e005      	b.n	80001a2 <displayLED_YELLOW+0x56>
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_YELLOW_2, GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800019c:	4803      	ldr	r0, [pc, #12]	@ (80001ac <displayLED_YELLOW+0x60>)
 800019e:	f001 fae8 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 80001a2:	bf00      	nop
}
 80001a4:	bf00      	nop
 80001a6:	3708      	adds	r7, #8
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bd80      	pop	{r7, pc}
 80001ac:	40010800 	.word	0x40010800

080001b0 <displayLED_RED>:

void displayLED_RED(int IS_ON, int index){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
 80001b8:	6039      	str	r1, [r7, #0]
	switch (index){
 80001ba:	683b      	ldr	r3, [r7, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d003      	beq.n	80001c8 <displayLED_RED+0x18>
 80001c0:	683b      	ldr	r3, [r7, #0]
 80001c2:	2b01      	cmp	r3, #1
 80001c4:	d00f      	beq.n	80001e6 <displayLED_RED+0x36>
	case 1:
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_RED_2, GPIO_PIN_RESET);
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_RED_2, GPIO_PIN_SET);
		break;
	}
}
 80001c6:	e01d      	b.n	8000204 <displayLED_RED+0x54>
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_RED_1, GPIO_PIN_RESET);
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d105      	bne.n	80001da <displayLED_RED+0x2a>
 80001ce:	2200      	movs	r2, #0
 80001d0:	2108      	movs	r1, #8
 80001d2:	480e      	ldr	r0, [pc, #56]	@ (800020c <displayLED_RED+0x5c>)
 80001d4:	f001 facd 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 80001d8:	e014      	b.n	8000204 <displayLED_RED+0x54>
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_RED_1, GPIO_PIN_SET);
 80001da:	2201      	movs	r2, #1
 80001dc:	2108      	movs	r1, #8
 80001de:	480b      	ldr	r0, [pc, #44]	@ (800020c <displayLED_RED+0x5c>)
 80001e0:	f001 fac7 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 80001e4:	e00e      	b.n	8000204 <displayLED_RED+0x54>
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_RED_2, GPIO_PIN_RESET);
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2b01      	cmp	r3, #1
 80001ea:	d105      	bne.n	80001f8 <displayLED_RED+0x48>
 80001ec:	2200      	movs	r2, #0
 80001ee:	2140      	movs	r1, #64	@ 0x40
 80001f0:	4806      	ldr	r0, [pc, #24]	@ (800020c <displayLED_RED+0x5c>)
 80001f2:	f001 fabe 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 80001f6:	e004      	b.n	8000202 <displayLED_RED+0x52>
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_RED_2, GPIO_PIN_SET);
 80001f8:	2201      	movs	r2, #1
 80001fa:	2140      	movs	r1, #64	@ 0x40
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <displayLED_RED+0x5c>)
 80001fe:	f001 fab8 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 8000202:	bf00      	nop
}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010800 	.word	0x40010800

08000210 <displayLED_GREEN>:

void displayLED_GREEN(int IS_ON, int index){
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
	switch (index){
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d003      	beq.n	8000228 <displayLED_GREEN+0x18>
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d00f      	beq.n	8000246 <displayLED_GREEN+0x36>
	case 1:
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_GREEN_2, GPIO_PIN_RESET);
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_GREEN_2, GPIO_PIN_SET);
		break;
	}
}
 8000226:	e01d      	b.n	8000264 <displayLED_GREEN+0x54>
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_GREEN_1, GPIO_PIN_RESET);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d105      	bne.n	800023a <displayLED_GREEN+0x2a>
 800022e:	2200      	movs	r2, #0
 8000230:	2110      	movs	r1, #16
 8000232:	480e      	ldr	r0, [pc, #56]	@ (800026c <displayLED_GREEN+0x5c>)
 8000234:	f001 fa9d 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 8000238:	e014      	b.n	8000264 <displayLED_GREEN+0x54>
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_GREEN_1, GPIO_PIN_SET);
 800023a:	2201      	movs	r2, #1
 800023c:	2110      	movs	r1, #16
 800023e:	480b      	ldr	r0, [pc, #44]	@ (800026c <displayLED_GREEN+0x5c>)
 8000240:	f001 fa97 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 8000244:	e00e      	b.n	8000264 <displayLED_GREEN+0x54>
		if (IS_ON == 1) HAL_GPIO_WritePin(PORTYPE_A, PIN_GREEN_2, GPIO_PIN_RESET);
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	2b01      	cmp	r3, #1
 800024a:	d105      	bne.n	8000258 <displayLED_GREEN+0x48>
 800024c:	2200      	movs	r2, #0
 800024e:	2180      	movs	r1, #128	@ 0x80
 8000250:	4806      	ldr	r0, [pc, #24]	@ (800026c <displayLED_GREEN+0x5c>)
 8000252:	f001 fa8e 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 8000256:	e004      	b.n	8000262 <displayLED_GREEN+0x52>
		else HAL_GPIO_WritePin(PORTYPE_A, PIN_GREEN_2, GPIO_PIN_SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2180      	movs	r1, #128	@ 0x80
 800025c:	4803      	ldr	r0, [pc, #12]	@ (800026c <displayLED_GREEN+0x5c>)
 800025e:	f001 fa88 	bl	8001772 <HAL_GPIO_WritePin>
		break;
 8000262:	bf00      	nop
}
 8000264:	bf00      	nop
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	40010800 	.word	0x40010800

08000270 <displayLED7SEG_LEFT>:

void displayLED7SEG_LEFT(int number){
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	int chuc = number /10;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	4a39      	ldr	r2, [pc, #228]	@ (8000360 <displayLED7SEG_LEFT+0xf0>)
 800027c:	fb82 1203 	smull	r1, r2, r2, r3
 8000280:	1092      	asrs	r2, r2, #2
 8000282:	17db      	asrs	r3, r3, #31
 8000284:	1ad3      	subs	r3, r2, r3
 8000286:	60fb      	str	r3, [r7, #12]
	int don_vi = number %10;
 8000288:	687a      	ldr	r2, [r7, #4]
 800028a:	4b35      	ldr	r3, [pc, #212]	@ (8000360 <displayLED7SEG_LEFT+0xf0>)
 800028c:	fb83 1302 	smull	r1, r3, r3, r2
 8000290:	1099      	asrs	r1, r3, #2
 8000292:	17d3      	asrs	r3, r2, #31
 8000294:	1ac9      	subs	r1, r1, r3
 8000296:	460b      	mov	r3, r1
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	440b      	add	r3, r1
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	1ad3      	subs	r3, r2, r3
 80002a0:	60bb      	str	r3, [r7, #8]

	 // Xuất BCD cho chữ số HÀNG CHỤC (ra IC U4)
	    HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG1_0, (don_vi >> 0) & 1); // Lấy bit 0
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	461a      	mov	r2, r3
 80002ae:	2101      	movs	r1, #1
 80002b0:	482c      	ldr	r0, [pc, #176]	@ (8000364 <displayLED7SEG_LEFT+0xf4>)
 80002b2:	f001 fa5e 	bl	8001772 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG1_1, (don_vi >> 1) & 1); // Lấy bit 1
 80002b6:	68bb      	ldr	r3, [r7, #8]
 80002b8:	105b      	asrs	r3, r3, #1
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 0301 	and.w	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	461a      	mov	r2, r3
 80002c4:	2102      	movs	r1, #2
 80002c6:	4827      	ldr	r0, [pc, #156]	@ (8000364 <displayLED7SEG_LEFT+0xf4>)
 80002c8:	f001 fa53 	bl	8001772 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG1_2, (don_vi >> 2) & 1); // Lấy bit 2
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	109b      	asrs	r3, r3, #2
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	b2db      	uxtb	r3, r3
 80002d8:	461a      	mov	r2, r3
 80002da:	2104      	movs	r1, #4
 80002dc:	4821      	ldr	r0, [pc, #132]	@ (8000364 <displayLED7SEG_LEFT+0xf4>)
 80002de:	f001 fa48 	bl	8001772 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG1_3, (don_vi >> 3) & 1); // Lấy bit 3
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	10db      	asrs	r3, r3, #3
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	461a      	mov	r2, r3
 80002f0:	2108      	movs	r1, #8
 80002f2:	481c      	ldr	r0, [pc, #112]	@ (8000364 <displayLED7SEG_LEFT+0xf4>)
 80002f4:	f001 fa3d 	bl	8001772 <HAL_GPIO_WritePin>

	    // Xuất BCD cho chữ số HÀNG ĐƠN VỊ (ra IC U3)
	    HAL_GPIO_WritePin(PORTYPE_A, PIN_INP_SEG0_0, (chuc >> 0) & 1);
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	f003 0301 	and.w	r3, r3, #1
 8000300:	b2db      	uxtb	r3, r3
 8000302:	461a      	mov	r2, r3
 8000304:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000308:	4817      	ldr	r0, [pc, #92]	@ (8000368 <displayLED7SEG_LEFT+0xf8>)
 800030a:	f001 fa32 	bl	8001772 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(PORTYPE_A, PIN_INP_SEG0_1, (chuc >> 1) & 1);
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	105b      	asrs	r3, r3, #1
 8000312:	b2db      	uxtb	r3, r3
 8000314:	f003 0301 	and.w	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	461a      	mov	r2, r3
 800031c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000320:	4811      	ldr	r0, [pc, #68]	@ (8000368 <displayLED7SEG_LEFT+0xf8>)
 8000322:	f001 fa26 	bl	8001772 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(PORTYPE_A, PIN_INP_SEG0_2, (chuc >> 2) & 1);
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	109b      	asrs	r3, r3, #2
 800032a:	b2db      	uxtb	r3, r3
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	b2db      	uxtb	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000338:	480b      	ldr	r0, [pc, #44]	@ (8000368 <displayLED7SEG_LEFT+0xf8>)
 800033a:	f001 fa1a 	bl	8001772 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(PORTYPE_A, PIN_INP_SEG0_3, (chuc >> 3) & 1);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	10db      	asrs	r3, r3, #3
 8000342:	b2db      	uxtb	r3, r3
 8000344:	f003 0301 	and.w	r3, r3, #1
 8000348:	b2db      	uxtb	r3, r3
 800034a:	461a      	mov	r2, r3
 800034c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000350:	4805      	ldr	r0, [pc, #20]	@ (8000368 <displayLED7SEG_LEFT+0xf8>)
 8000352:	f001 fa0e 	bl	8001772 <HAL_GPIO_WritePin>
}
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	66666667 	.word	0x66666667
 8000364:	40010c00 	.word	0x40010c00
 8000368:	40010800 	.word	0x40010800

0800036c <displayLED7SEG_TOP>:

void displayLED7SEG_TOP(int number){
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	int chuc = number/10;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a39      	ldr	r2, [pc, #228]	@ (800045c <displayLED7SEG_TOP+0xf0>)
 8000378:	fb82 1203 	smull	r1, r2, r2, r3
 800037c:	1092      	asrs	r2, r2, #2
 800037e:	17db      	asrs	r3, r3, #31
 8000380:	1ad3      	subs	r3, r2, r3
 8000382:	60fb      	str	r3, [r7, #12]
	int don_vi = number % 10;
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	4b35      	ldr	r3, [pc, #212]	@ (800045c <displayLED7SEG_TOP+0xf0>)
 8000388:	fb83 1302 	smull	r1, r3, r3, r2
 800038c:	1099      	asrs	r1, r3, #2
 800038e:	17d3      	asrs	r3, r2, #31
 8000390:	1ac9      	subs	r1, r1, r3
 8000392:	460b      	mov	r3, r1
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	440b      	add	r3, r1
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	1ad3      	subs	r3, r2, r3
 800039c:	60bb      	str	r3, [r7, #8]



	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG2_0, (chuc >> 0) & 1);
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	2110      	movs	r1, #16
 80003ac:	482c      	ldr	r0, [pc, #176]	@ (8000460 <displayLED7SEG_TOP+0xf4>)
 80003ae:	f001 f9e0 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG2_1, (chuc >> 1) & 1);
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	105b      	asrs	r3, r3, #1
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	461a      	mov	r2, r3
 80003c0:	2120      	movs	r1, #32
 80003c2:	4827      	ldr	r0, [pc, #156]	@ (8000460 <displayLED7SEG_TOP+0xf4>)
 80003c4:	f001 f9d5 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG2_2, (chuc >> 2) & 1);
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	109b      	asrs	r3, r3, #2
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	f003 0301 	and.w	r3, r3, #1
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	461a      	mov	r2, r3
 80003d6:	2140      	movs	r1, #64	@ 0x40
 80003d8:	4821      	ldr	r0, [pc, #132]	@ (8000460 <displayLED7SEG_TOP+0xf4>)
 80003da:	f001 f9ca 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG2_3, (chuc >> 3) & 1);
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	10db      	asrs	r3, r3, #3
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	f003 0301 	and.w	r3, r3, #1
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	461a      	mov	r2, r3
 80003ec:	2180      	movs	r1, #128	@ 0x80
 80003ee:	481c      	ldr	r0, [pc, #112]	@ (8000460 <displayLED7SEG_TOP+0xf4>)
 80003f0:	f001 f9bf 	bl	8001772 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG3_0, (don_vi >> 0) & 1);
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000404:	4816      	ldr	r0, [pc, #88]	@ (8000460 <displayLED7SEG_TOP+0xf4>)
 8000406:	f001 f9b4 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG3_1, (don_vi >> 1) & 1);
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	b2db      	uxtb	r3, r3
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800041c:	4810      	ldr	r0, [pc, #64]	@ (8000460 <displayLED7SEG_TOP+0xf4>)
 800041e:	f001 f9a8 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG3_2, (don_vi >> 2) & 1);
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	109b      	asrs	r3, r3, #2
 8000426:	b2db      	uxtb	r3, r3
 8000428:	f003 0301 	and.w	r3, r3, #1
 800042c:	b2db      	uxtb	r3, r3
 800042e:	461a      	mov	r2, r3
 8000430:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000434:	480a      	ldr	r0, [pc, #40]	@ (8000460 <displayLED7SEG_TOP+0xf4>)
 8000436:	f001 f99c 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG3_3, (don_vi >> 3) & 1);
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	10db      	asrs	r3, r3, #3
 800043e:	b2db      	uxtb	r3, r3
 8000440:	f003 0301 	and.w	r3, r3, #1
 8000444:	b2db      	uxtb	r3, r3
 8000446:	461a      	mov	r2, r3
 8000448:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800044c:	4804      	ldr	r0, [pc, #16]	@ (8000460 <displayLED7SEG_TOP+0xf4>)
 800044e:	f001 f990 	bl	8001772 <HAL_GPIO_WritePin>

}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	66666667 	.word	0x66666667
 8000460:	40010c00 	.word	0x40010c00

08000464 <displayLED7SEG_MODE>:

void displayLED7SEG_MODE(int number){
 8000464:	b580      	push	{r7, lr}
 8000466:	b082      	sub	sp, #8
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG_MODE_0, (number >> 0) & 1);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	f003 0301 	and.w	r3, r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	461a      	mov	r2, r3
 8000478:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800047c:	4815      	ldr	r0, [pc, #84]	@ (80004d4 <displayLED7SEG_MODE+0x70>)
 800047e:	f001 f978 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG_MODE_1, (number >> 1) & 1);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	105b      	asrs	r3, r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	b2db      	uxtb	r3, r3
 800048e:	461a      	mov	r2, r3
 8000490:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000494:	480f      	ldr	r0, [pc, #60]	@ (80004d4 <displayLED7SEG_MODE+0x70>)
 8000496:	f001 f96c 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG_MODE_2, (number >> 2) & 1);
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	109b      	asrs	r3, r3, #2
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	f003 0301 	and.w	r3, r3, #1
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	461a      	mov	r2, r3
 80004a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004ac:	4809      	ldr	r0, [pc, #36]	@ (80004d4 <displayLED7SEG_MODE+0x70>)
 80004ae:	f001 f960 	bl	8001772 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PORTYPE_B, PIN_INP_SEG_MODE_3, (number >> 3) & 1);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	10db      	asrs	r3, r3, #3
 80004b6:	b2db      	uxtb	r3, r3
 80004b8:	f003 0301 	and.w	r3, r3, #1
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c4:	4803      	ldr	r0, [pc, #12]	@ (80004d4 <displayLED7SEG_MODE+0x70>)
 80004c6:	f001 f954 	bl	8001772 <HAL_GPIO_WritePin>
}
 80004ca:	bf00      	nop
 80004cc:	3708      	adds	r7, #8
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <startNormalMode>:
int temp_value= 0;

int time_counter_road1 = 0;
int time_counter_road2 = 0;

void startNormalMode(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	currMode = MODE_1_NORMAL;
 80004dc:	4b13      	ldr	r3, [pc, #76]	@ (800052c <startNormalMode+0x54>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
	traffic_state = RED_GREEN;
 80004e2:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <startNormalMode+0x58>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	701a      	strb	r2, [r3, #0]
	time_counter_road1 = time_red / 1000;
 80004e8:	4b12      	ldr	r3, [pc, #72]	@ (8000534 <startNormalMode+0x5c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a12      	ldr	r2, [pc, #72]	@ (8000538 <startNormalMode+0x60>)
 80004ee:	fb82 1203 	smull	r1, r2, r2, r3
 80004f2:	1192      	asrs	r2, r2, #6
 80004f4:	17db      	asrs	r3, r3, #31
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	4a10      	ldr	r2, [pc, #64]	@ (800053c <startNormalMode+0x64>)
 80004fa:	6013      	str	r3, [r2, #0]
	time_counter_road2 = time_green / 1000;
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <startNormalMode+0x68>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <startNormalMode+0x60>)
 8000502:	fb82 1203 	smull	r1, r2, r2, r3
 8000506:	1192      	asrs	r2, r2, #6
 8000508:	17db      	asrs	r3, r3, #31
 800050a:	1ad3      	subs	r3, r2, r3
 800050c:	4a0d      	ldr	r2, [pc, #52]	@ (8000544 <startNormalMode+0x6c>)
 800050e:	6013      	str	r3, [r2, #0]

	setTimer(TIMER_TRAFFIC, time_green);
 8000510:	4b0b      	ldr	r3, [pc, #44]	@ (8000540 <startNormalMode+0x68>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	2000      	movs	r0, #0
 8000518:	f000 fbd2 	bl	8000cc0 <setTimer>
	setTimer(TIMER_1S_COUNTDOWN, 1000);
 800051c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000520:	2002      	movs	r0, #2
 8000522:	f000 fbcd 	bl	8000cc0 <setTimer>
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000045 	.word	0x20000045
 8000530:	20000044 	.word	0x20000044
 8000534:	20000000 	.word	0x20000000
 8000538:	10624dd3 	.word	0x10624dd3
 800053c:	20000054 	.word	0x20000054
 8000540:	20000008 	.word	0x20000008
 8000544:	20000058 	.word	0x20000058

08000548 <fsm_for_input_processing>:

void fsm_for_input_processing(void){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_BUTTONS; i++)
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	e027      	b.n	80005a4 <fsm_for_input_processing+0x5c>
	{

		if (is_button_pressed(i) == BUTTON_IS_PRESSED){
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f000 fa7d 	bl	8000a58 <is_button_pressed>
 800055e:	4603      	mov	r3, r0
 8000560:	2b00      	cmp	r3, #0
 8000562:	d10e      	bne.n	8000582 <fsm_for_input_processing+0x3a>
			prevState[i] = currState[i];
 8000564:	4a7c      	ldr	r2, [pc, #496]	@ (8000758 <fsm_for_input_processing+0x210>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	7819      	ldrb	r1, [r3, #0]
 800056c:	4a7b      	ldr	r2, [pc, #492]	@ (800075c <fsm_for_input_processing+0x214>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4413      	add	r3, r2
 8000572:	460a      	mov	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
			currState[i] = PRESSED;
 8000576:	4a78      	ldr	r2, [pc, #480]	@ (8000758 <fsm_for_input_processing+0x210>)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4413      	add	r3, r2
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	e00d      	b.n	800059e <fsm_for_input_processing+0x56>
		}else
		{
			prevState[i] = currState[i];
 8000582:	4a75      	ldr	r2, [pc, #468]	@ (8000758 <fsm_for_input_processing+0x210>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4413      	add	r3, r2
 8000588:	7819      	ldrb	r1, [r3, #0]
 800058a:	4a74      	ldr	r2, [pc, #464]	@ (800075c <fsm_for_input_processing+0x214>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4413      	add	r3, r2
 8000590:	460a      	mov	r2, r1
 8000592:	701a      	strb	r2, [r3, #0]
			currState[i] = RELEASED;
 8000594:	4a70      	ldr	r2, [pc, #448]	@ (8000758 <fsm_for_input_processing+0x210>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NO_BUTTONS; i++)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	3301      	adds	r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b02      	cmp	r3, #2
 80005a8:	ddd4      	ble.n	8000554 <fsm_for_input_processing+0xc>
		}
	}
	switch (currMode){
 80005aa:	4b6d      	ldr	r3, [pc, #436]	@ (8000760 <fsm_for_input_processing+0x218>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	f200 81ce 	bhi.w	8000950 <fsm_for_input_processing+0x408>
 80005b4:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <fsm_for_input_processing+0x74>)
 80005b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ba:	bf00      	nop
 80005bc:	080005cd 	.word	0x080005cd
 80005c0:	08000663 	.word	0x08000663
 80005c4:	08000785 	.word	0x08000785
 80005c8:	08000879 	.word	0x08000879
	case MODE_1_NORMAL:
			if (isTimerExpired(TIMER_1S_COUNTDOWN) == 1){
 80005cc:	2002      	movs	r0, #2
 80005ce:	f000 fb97 	bl	8000d00 <isTimerExpired>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d10e      	bne.n	80005f6 <fsm_for_input_processing+0xae>
				time_counter_road1--;
 80005d8:	4b62      	ldr	r3, [pc, #392]	@ (8000764 <fsm_for_input_processing+0x21c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	3b01      	subs	r3, #1
 80005de:	4a61      	ldr	r2, [pc, #388]	@ (8000764 <fsm_for_input_processing+0x21c>)
 80005e0:	6013      	str	r3, [r2, #0]
				time_counter_road2--;
 80005e2:	4b61      	ldr	r3, [pc, #388]	@ (8000768 <fsm_for_input_processing+0x220>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a5f      	ldr	r2, [pc, #380]	@ (8000768 <fsm_for_input_processing+0x220>)
 80005ea:	6013      	str	r3, [r2, #0]
				setTimer(TIMER_1S_COUNTDOWN, 1000);
 80005ec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005f0:	2002      	movs	r0, #2
 80005f2:	f000 fb65 	bl	8000cc0 <setTimer>
			}
			updateTrafficLight();
 80005f6:	f000 fc5f 	bl	8000eb8 <updateTrafficLight>

		if (currState[0] == PRESSED && prevState[0] == RELEASED){
 80005fa:	4b57      	ldr	r3, [pc, #348]	@ (8000758 <fsm_for_input_processing+0x210>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	f040 81a8 	bne.w	8000954 <fsm_for_input_processing+0x40c>
 8000604:	4b55      	ldr	r3, [pc, #340]	@ (800075c <fsm_for_input_processing+0x214>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	f040 81a3 	bne.w	8000954 <fsm_for_input_processing+0x40c>
			displayLED_GREEN(0, 0);
 800060e:	2100      	movs	r1, #0
 8000610:	2000      	movs	r0, #0
 8000612:	f7ff fdfd 	bl	8000210 <displayLED_GREEN>
			displayLED_GREEN(0, 1);
 8000616:	2101      	movs	r1, #1
 8000618:	2000      	movs	r0, #0
 800061a:	f7ff fdf9 	bl	8000210 <displayLED_GREEN>
			displayLED_RED(0, 0);
 800061e:	2100      	movs	r1, #0
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fdc5 	bl	80001b0 <displayLED_RED>
			displayLED_RED(0, 1);
 8000626:	2101      	movs	r1, #1
 8000628:	2000      	movs	r0, #0
 800062a:	f7ff fdc1 	bl	80001b0 <displayLED_RED>
			displayLED_YELLOW(0, 0);
 800062e:	2100      	movs	r1, #0
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff fd8b 	bl	800014c <displayLED_YELLOW>
			displayLED_YELLOW(0, 1);
 8000636:	2101      	movs	r1, #1
 8000638:	2000      	movs	r0, #0
 800063a:	f7ff fd87 	bl	800014c <displayLED_YELLOW>
			temp_value = time_red/1000;
 800063e:	4b4b      	ldr	r3, [pc, #300]	@ (800076c <fsm_for_input_processing+0x224>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a4b      	ldr	r2, [pc, #300]	@ (8000770 <fsm_for_input_processing+0x228>)
 8000644:	fb82 1203 	smull	r1, r2, r2, r3
 8000648:	1192      	asrs	r2, r2, #6
 800064a:	17db      	asrs	r3, r3, #31
 800064c:	1ad3      	subs	r3, r2, r3
 800064e:	4a49      	ldr	r2, [pc, #292]	@ (8000774 <fsm_for_input_processing+0x22c>)
 8000650:	6013      	str	r3, [r2, #0]
			setTimer(TIMER_MODE_LED, 250);
 8000652:	21fa      	movs	r1, #250	@ 0xfa
 8000654:	2001      	movs	r0, #1
 8000656:	f000 fb33 	bl	8000cc0 <setTimer>
			currMode = MODE_2_RED_MODIFY;
 800065a:	4b41      	ldr	r3, [pc, #260]	@ (8000760 <fsm_for_input_processing+0x218>)
 800065c:	2201      	movs	r2, #1
 800065e:	701a      	strb	r2, [r3, #0]
		}
		 break;
 8000660:	e178      	b.n	8000954 <fsm_for_input_processing+0x40c>

	case MODE_2_RED_MODIFY:

		if (isTimerExpired(TIMER_MODE_LED) == 1){
 8000662:	2001      	movs	r0, #1
 8000664:	f000 fb4c 	bl	8000d00 <isTimerExpired>
 8000668:	4603      	mov	r3, r0
 800066a:	2b01      	cmp	r3, #1
 800066c:	d10b      	bne.n	8000686 <fsm_for_input_processing+0x13e>
			HAL_GPIO_TogglePin(PORTYPE_A, PIN_RED_1);
 800066e:	2108      	movs	r1, #8
 8000670:	4841      	ldr	r0, [pc, #260]	@ (8000778 <fsm_for_input_processing+0x230>)
 8000672:	f001 f896 	bl	80017a2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PORTYPE_A,PIN_RED_2);
 8000676:	2140      	movs	r1, #64	@ 0x40
 8000678:	483f      	ldr	r0, [pc, #252]	@ (8000778 <fsm_for_input_processing+0x230>)
 800067a:	f001 f892 	bl	80017a2 <HAL_GPIO_TogglePin>
			setTimer(TIMER_MODE_LED, 250);
 800067e:	21fa      	movs	r1, #250	@ 0xfa
 8000680:	2001      	movs	r0, #1
 8000682:	f000 fb1d 	bl	8000cc0 <setTimer>
			}
			displayLED7SEG_MODE(2);
 8000686:	2002      	movs	r0, #2
 8000688:	f7ff feec 	bl	8000464 <displayLED7SEG_MODE>
			displayLED7SEG_LEFT(temp_value);
 800068c:	4b39      	ldr	r3, [pc, #228]	@ (8000774 <fsm_for_input_processing+0x22c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fded 	bl	8000270 <displayLED7SEG_LEFT>
			if (currState[1] == PRESSED && prevState[1] == RELEASED){
 8000696:	4b30      	ldr	r3, [pc, #192]	@ (8000758 <fsm_for_input_processing+0x210>)
 8000698:	785b      	ldrb	r3, [r3, #1]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d10f      	bne.n	80006be <fsm_for_input_processing+0x176>
 800069e:	4b2f      	ldr	r3, [pc, #188]	@ (800075c <fsm_for_input_processing+0x214>)
 80006a0:	785b      	ldrb	r3, [r3, #1]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10b      	bne.n	80006be <fsm_for_input_processing+0x176>
				temp_value++;
 80006a6:	4b33      	ldr	r3, [pc, #204]	@ (8000774 <fsm_for_input_processing+0x22c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	3301      	adds	r3, #1
 80006ac:	4a31      	ldr	r2, [pc, #196]	@ (8000774 <fsm_for_input_processing+0x22c>)
 80006ae:	6013      	str	r3, [r2, #0]
				if (temp_value > 99){
 80006b0:	4b30      	ldr	r3, [pc, #192]	@ (8000774 <fsm_for_input_processing+0x22c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b63      	cmp	r3, #99	@ 0x63
 80006b6:	dd02      	ble.n	80006be <fsm_for_input_processing+0x176>
					temp_value = 1;
 80006b8:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <fsm_for_input_processing+0x22c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
				}
			}
			if(currState[2] == PRESSED && prevState[2] == RELEASED){
 80006be:	4b26      	ldr	r3, [pc, #152]	@ (8000758 <fsm_for_input_processing+0x210>)
 80006c0:	789b      	ldrb	r3, [r3, #2]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d123      	bne.n	800070e <fsm_for_input_processing+0x1c6>
 80006c6:	4b25      	ldr	r3, [pc, #148]	@ (800075c <fsm_for_input_processing+0x214>)
 80006c8:	789b      	ldrb	r3, [r3, #2]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d11f      	bne.n	800070e <fsm_for_input_processing+0x1c6>
				time_red = temp_value * 1000;
 80006ce:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <fsm_for_input_processing+0x22c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d6:	fb02 f303 	mul.w	r3, r2, r3
 80006da:	4a24      	ldr	r2, [pc, #144]	@ (800076c <fsm_for_input_processing+0x224>)
 80006dc:	6013      	str	r3, [r2, #0]
				time_green += ((temp_value * 1000) - 5000);
 80006de:	4b25      	ldr	r3, [pc, #148]	@ (8000774 <fsm_for_input_processing+0x22c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006e6:	fb02 f303 	mul.w	r3, r2, r3
 80006ea:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 80006ee:	3b08      	subs	r3, #8
 80006f0:	4a22      	ldr	r2, [pc, #136]	@ (800077c <fsm_for_input_processing+0x234>)
 80006f2:	6812      	ldr	r2, [r2, #0]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a21      	ldr	r2, [pc, #132]	@ (800077c <fsm_for_input_processing+0x234>)
 80006f8:	6013      	str	r3, [r2, #0]
				displayLED_RED(0, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	2000      	movs	r0, #0
 80006fe:	f7ff fd57 	bl	80001b0 <displayLED_RED>
				displayLED_RED(0, 1);
 8000702:	2101      	movs	r1, #1
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fd53 	bl	80001b0 <displayLED_RED>
				startNormalMode();
 800070a:	f7ff fee5 	bl	80004d8 <startNormalMode>
			}


		if (currState[0] == PRESSED && prevState[0] == RELEASED){
 800070e:	4b12      	ldr	r3, [pc, #72]	@ (8000758 <fsm_for_input_processing+0x210>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b01      	cmp	r3, #1
 8000714:	f040 8120 	bne.w	8000958 <fsm_for_input_processing+0x410>
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <fsm_for_input_processing+0x214>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	f040 811b 	bne.w	8000958 <fsm_for_input_processing+0x410>
			temp_value = time_amber/1000;
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <fsm_for_input_processing+0x238>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <fsm_for_input_processing+0x228>)
 8000728:	fb82 1203 	smull	r1, r2, r2, r3
 800072c:	1192      	asrs	r2, r2, #6
 800072e:	17db      	asrs	r3, r3, #31
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	4a10      	ldr	r2, [pc, #64]	@ (8000774 <fsm_for_input_processing+0x22c>)
 8000734:	6013      	str	r3, [r2, #0]
			displayLED_RED(0, 0);
 8000736:	2100      	movs	r1, #0
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fd39 	bl	80001b0 <displayLED_RED>
			displayLED_RED(0, 1);
 800073e:	2101      	movs	r1, #1
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff fd35 	bl	80001b0 <displayLED_RED>
			setTimer(TIMER_MODE_LED, 250);
 8000746:	21fa      	movs	r1, #250	@ 0xfa
 8000748:	2001      	movs	r0, #1
 800074a:	f000 fab9 	bl	8000cc0 <setTimer>
			currMode = MODE_3_AMBER_MODIFY;
 800074e:	4b04      	ldr	r3, [pc, #16]	@ (8000760 <fsm_for_input_processing+0x218>)
 8000750:	2202      	movs	r2, #2
 8000752:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000754:	e100      	b.n	8000958 <fsm_for_input_processing+0x410>
 8000756:	bf00      	nop
 8000758:	2000004c 	.word	0x2000004c
 800075c:	20000048 	.word	0x20000048
 8000760:	20000045 	.word	0x20000045
 8000764:	20000054 	.word	0x20000054
 8000768:	20000058 	.word	0x20000058
 800076c:	20000000 	.word	0x20000000
 8000770:	10624dd3 	.word	0x10624dd3
 8000774:	20000050 	.word	0x20000050
 8000778:	40010800 	.word	0x40010800
 800077c:	20000008 	.word	0x20000008
 8000780:	20000004 	.word	0x20000004

	case MODE_3_AMBER_MODIFY:

		if (isTimerExpired(TIMER_MODE_LED) == 1){
 8000784:	2001      	movs	r0, #1
 8000786:	f000 fabb 	bl	8000d00 <isTimerExpired>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d10c      	bne.n	80007aa <fsm_for_input_processing+0x262>
			HAL_GPIO_TogglePin(PORTYPE_A, PIN_YELLOW_1);
 8000790:	2120      	movs	r1, #32
 8000792:	4876      	ldr	r0, [pc, #472]	@ (800096c <fsm_for_input_processing+0x424>)
 8000794:	f001 f805 	bl	80017a2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PORTYPE_A, PIN_YELLOW_2);
 8000798:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800079c:	4873      	ldr	r0, [pc, #460]	@ (800096c <fsm_for_input_processing+0x424>)
 800079e:	f001 f800 	bl	80017a2 <HAL_GPIO_TogglePin>
			setTimer(TIMER_MODE_LED, 250);
 80007a2:	21fa      	movs	r1, #250	@ 0xfa
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 fa8b 	bl	8000cc0 <setTimer>
		}

		displayLED7SEG_MODE(3);
 80007aa:	2003      	movs	r0, #3
 80007ac:	f7ff fe5a 	bl	8000464 <displayLED7SEG_MODE>
		displayLED7SEG_LEFT(temp_value);
 80007b0:	4b6f      	ldr	r3, [pc, #444]	@ (8000970 <fsm_for_input_processing+0x428>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fd5b 	bl	8000270 <displayLED7SEG_LEFT>

		if (currState[1] == PRESSED && prevState[1] == RELEASED){
 80007ba:	4b6e      	ldr	r3, [pc, #440]	@ (8000974 <fsm_for_input_processing+0x42c>)
 80007bc:	785b      	ldrb	r3, [r3, #1]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d10f      	bne.n	80007e2 <fsm_for_input_processing+0x29a>
 80007c2:	4b6d      	ldr	r3, [pc, #436]	@ (8000978 <fsm_for_input_processing+0x430>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d10b      	bne.n	80007e2 <fsm_for_input_processing+0x29a>
				temp_value++;
 80007ca:	4b69      	ldr	r3, [pc, #420]	@ (8000970 <fsm_for_input_processing+0x428>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a67      	ldr	r2, [pc, #412]	@ (8000970 <fsm_for_input_processing+0x428>)
 80007d2:	6013      	str	r3, [r2, #0]
				if (temp_value > 99){
 80007d4:	4b66      	ldr	r3, [pc, #408]	@ (8000970 <fsm_for_input_processing+0x428>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b63      	cmp	r3, #99	@ 0x63
 80007da:	dd02      	ble.n	80007e2 <fsm_for_input_processing+0x29a>
					temp_value = 1;
 80007dc:	4b64      	ldr	r3, [pc, #400]	@ (8000970 <fsm_for_input_processing+0x428>)
 80007de:	2201      	movs	r2, #1
 80007e0:	601a      	str	r2, [r3, #0]
				}
			}

		if(currState[2] == PRESSED && prevState[2] == RELEASED){
 80007e2:	4b64      	ldr	r3, [pc, #400]	@ (8000974 <fsm_for_input_processing+0x42c>)
 80007e4:	789b      	ldrb	r3, [r3, #2]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d122      	bne.n	8000830 <fsm_for_input_processing+0x2e8>
 80007ea:	4b63      	ldr	r3, [pc, #396]	@ (8000978 <fsm_for_input_processing+0x430>)
 80007ec:	789b      	ldrb	r3, [r3, #2]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d11e      	bne.n	8000830 <fsm_for_input_processing+0x2e8>
			time_amber = temp_value*1000;
 80007f2:	4b5f      	ldr	r3, [pc, #380]	@ (8000970 <fsm_for_input_processing+0x428>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	4a5f      	ldr	r2, [pc, #380]	@ (800097c <fsm_for_input_processing+0x434>)
 8000800:	6013      	str	r3, [r2, #0]
			time_red += ((temp_value *1000) - 2000);
 8000802:	4b5b      	ldr	r3, [pc, #364]	@ (8000970 <fsm_for_input_processing+0x428>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800080a:	fb02 f303 	mul.w	r3, r2, r3
 800080e:	f5a3 62fa 	sub.w	r2, r3, #2000	@ 0x7d0
 8000812:	4b5b      	ldr	r3, [pc, #364]	@ (8000980 <fsm_for_input_processing+0x438>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a59      	ldr	r2, [pc, #356]	@ (8000980 <fsm_for_input_processing+0x438>)
 800081a:	6013      	str	r3, [r2, #0]
			displayLED_YELLOW(0, 0);
 800081c:	2100      	movs	r1, #0
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fc94 	bl	800014c <displayLED_YELLOW>
			displayLED_YELLOW(0, 1);
 8000824:	2101      	movs	r1, #1
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fc90 	bl	800014c <displayLED_YELLOW>
			startNormalMode();
 800082c:	f7ff fe54 	bl	80004d8 <startNormalMode>
		}

		if (currState[0] == PRESSED && prevState[0] == RELEASED){
 8000830:	4b50      	ldr	r3, [pc, #320]	@ (8000974 <fsm_for_input_processing+0x42c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b01      	cmp	r3, #1
 8000836:	f040 8091 	bne.w	800095c <fsm_for_input_processing+0x414>
 800083a:	4b4f      	ldr	r3, [pc, #316]	@ (8000978 <fsm_for_input_processing+0x430>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	f040 808c 	bne.w	800095c <fsm_for_input_processing+0x414>
			temp_value = time_green /1000;
 8000844:	4b4f      	ldr	r3, [pc, #316]	@ (8000984 <fsm_for_input_processing+0x43c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a4f      	ldr	r2, [pc, #316]	@ (8000988 <fsm_for_input_processing+0x440>)
 800084a:	fb82 1203 	smull	r1, r2, r2, r3
 800084e:	1192      	asrs	r2, r2, #6
 8000850:	17db      	asrs	r3, r3, #31
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	4a46      	ldr	r2, [pc, #280]	@ (8000970 <fsm_for_input_processing+0x428>)
 8000856:	6013      	str	r3, [r2, #0]
			displayLED_YELLOW(0, 0);
 8000858:	2100      	movs	r1, #0
 800085a:	2000      	movs	r0, #0
 800085c:	f7ff fc76 	bl	800014c <displayLED_YELLOW>
				displayLED_YELLOW(0, 1);
 8000860:	2101      	movs	r1, #1
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff fc72 	bl	800014c <displayLED_YELLOW>
			setTimer(TIMER_MODE_LED, 250);
 8000868:	21fa      	movs	r1, #250	@ 0xfa
 800086a:	2001      	movs	r0, #1
 800086c:	f000 fa28 	bl	8000cc0 <setTimer>
			currMode = MODE_4_GREEN_MODIFY;
 8000870:	4b46      	ldr	r3, [pc, #280]	@ (800098c <fsm_for_input_processing+0x444>)
 8000872:	2203      	movs	r2, #3
 8000874:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000876:	e071      	b.n	800095c <fsm_for_input_processing+0x414>

	case MODE_4_GREEN_MODIFY:

		if(isTimerExpired(TIMER_MODE_LED) == 1){
 8000878:	2001      	movs	r0, #1
 800087a:	f000 fa41 	bl	8000d00 <isTimerExpired>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d10b      	bne.n	800089c <fsm_for_input_processing+0x354>
			HAL_GPIO_TogglePin(PORTYPE_A, PIN_GREEN_1);
 8000884:	2110      	movs	r1, #16
 8000886:	4839      	ldr	r0, [pc, #228]	@ (800096c <fsm_for_input_processing+0x424>)
 8000888:	f000 ff8b 	bl	80017a2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(PORTYPE_A, PIN_GREEN_2);
 800088c:	2180      	movs	r1, #128	@ 0x80
 800088e:	4837      	ldr	r0, [pc, #220]	@ (800096c <fsm_for_input_processing+0x424>)
 8000890:	f000 ff87 	bl	80017a2 <HAL_GPIO_TogglePin>
			setTimer(TIMER_MODE_LED, 250);
 8000894:	21fa      	movs	r1, #250	@ 0xfa
 8000896:	2001      	movs	r0, #1
 8000898:	f000 fa12 	bl	8000cc0 <setTimer>
		}

		displayLED7SEG_MODE(4);
 800089c:	2004      	movs	r0, #4
 800089e:	f7ff fde1 	bl	8000464 <displayLED7SEG_MODE>
		displayLED7SEG_LEFT(temp_value);
 80008a2:	4b33      	ldr	r3, [pc, #204]	@ (8000970 <fsm_for_input_processing+0x428>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fce2 	bl	8000270 <displayLED7SEG_LEFT>

		if (currState[1] == PRESSED && prevState[1] == RELEASED){
 80008ac:	4b31      	ldr	r3, [pc, #196]	@ (8000974 <fsm_for_input_processing+0x42c>)
 80008ae:	785b      	ldrb	r3, [r3, #1]
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d10f      	bne.n	80008d4 <fsm_for_input_processing+0x38c>
 80008b4:	4b30      	ldr	r3, [pc, #192]	@ (8000978 <fsm_for_input_processing+0x430>)
 80008b6:	785b      	ldrb	r3, [r3, #1]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d10b      	bne.n	80008d4 <fsm_for_input_processing+0x38c>
				temp_value++;
 80008bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000970 <fsm_for_input_processing+0x428>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	3301      	adds	r3, #1
 80008c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000970 <fsm_for_input_processing+0x428>)
 80008c4:	6013      	str	r3, [r2, #0]
				if (temp_value > 99){
 80008c6:	4b2a      	ldr	r3, [pc, #168]	@ (8000970 <fsm_for_input_processing+0x428>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b63      	cmp	r3, #99	@ 0x63
 80008cc:	dd02      	ble.n	80008d4 <fsm_for_input_processing+0x38c>
					temp_value = 1;
 80008ce:	4b28      	ldr	r3, [pc, #160]	@ (8000970 <fsm_for_input_processing+0x428>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
				}
			}

		if (currState[2] == PRESSED && prevState[2] == RELEASED){
 80008d4:	4b27      	ldr	r3, [pc, #156]	@ (8000974 <fsm_for_input_processing+0x42c>)
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d125      	bne.n	8000928 <fsm_for_input_processing+0x3e0>
 80008dc:	4b26      	ldr	r3, [pc, #152]	@ (8000978 <fsm_for_input_processing+0x430>)
 80008de:	789b      	ldrb	r3, [r3, #2]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d121      	bne.n	8000928 <fsm_for_input_processing+0x3e0>
			time_green = temp_value * 1000;
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <fsm_for_input_processing+0x428>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	4a24      	ldr	r2, [pc, #144]	@ (8000984 <fsm_for_input_processing+0x43c>)
 80008f2:	6013      	str	r3, [r2, #0]
			time_red += ((temp_value * 1000) - 3000);
 80008f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000970 <fsm_for_input_processing+0x428>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008fc:	fb02 f303 	mul.w	r3, r2, r3
 8000900:	f6a3 32b8 	subw	r2, r3, #3000	@ 0xbb8
 8000904:	4b1e      	ldr	r3, [pc, #120]	@ (8000980 <fsm_for_input_processing+0x438>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4413      	add	r3, r2
 800090a:	4a1d      	ldr	r2, [pc, #116]	@ (8000980 <fsm_for_input_processing+0x438>)
 800090c:	6013      	str	r3, [r2, #0]
			currMode = MODE_1_NORMAL;
 800090e:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <fsm_for_input_processing+0x444>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
			displayLED_GREEN(0, 0);
 8000914:	2100      	movs	r1, #0
 8000916:	2000      	movs	r0, #0
 8000918:	f7ff fc7a 	bl	8000210 <displayLED_GREEN>
			displayLED_GREEN(0, 1);
 800091c:	2101      	movs	r1, #1
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff fc76 	bl	8000210 <displayLED_GREEN>
		    startNormalMode();
 8000924:	f7ff fdd8 	bl	80004d8 <startNormalMode>
		}


		if (currState[0] == PRESSED && prevState[0] == RELEASED){
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <fsm_for_input_processing+0x42c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d117      	bne.n	8000960 <fsm_for_input_processing+0x418>
 8000930:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <fsm_for_input_processing+0x430>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d113      	bne.n	8000960 <fsm_for_input_processing+0x418>
			currMode = MODE_1_NORMAL;
 8000938:	4b14      	ldr	r3, [pc, #80]	@ (800098c <fsm_for_input_processing+0x444>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
			displayLED_GREEN(0, 0);
 800093e:	2100      	movs	r1, #0
 8000940:	2000      	movs	r0, #0
 8000942:	f7ff fc65 	bl	8000210 <displayLED_GREEN>
			displayLED_GREEN(0, 1);
 8000946:	2101      	movs	r1, #1
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fc61 	bl	8000210 <displayLED_GREEN>
		}
		break;
 800094e:	e007      	b.n	8000960 <fsm_for_input_processing+0x418>
	default:
		break;
 8000950:	bf00      	nop
 8000952:	e006      	b.n	8000962 <fsm_for_input_processing+0x41a>
		 break;
 8000954:	bf00      	nop
 8000956:	e004      	b.n	8000962 <fsm_for_input_processing+0x41a>
		break;
 8000958:	bf00      	nop
 800095a:	e002      	b.n	8000962 <fsm_for_input_processing+0x41a>
		break;
 800095c:	bf00      	nop
 800095e:	e000      	b.n	8000962 <fsm_for_input_processing+0x41a>
		break;
 8000960:	bf00      	nop
	}
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010800 	.word	0x40010800
 8000970:	20000050 	.word	0x20000050
 8000974:	2000004c 	.word	0x2000004c
 8000978:	20000048 	.word	0x20000048
 800097c:	20000004 	.word	0x20000004
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	10624dd3 	.word	0x10624dd3
 800098c:	20000045 	.word	0x20000045

08000990 <button_reading>:
//we define a flag for a button pressed more than 1 second.
static uint8_t flagForButtonPress1s[NO_OF_BUTTONS];
//we define counter for automatically increasing the value
//after the button is pressed more than 1 second.
static uint16_t counterForButtonPress1s[NO_OF_BUTTONS];
void button_reading(void){
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i ++){
 8000996:	2300      	movs	r3, #0
 8000998:	71fb      	strb	r3, [r7, #7]
 800099a:	e046      	b.n	8000a2a <button_reading+0x9a>
	debounceButtonBuffer2 [i] =debounceButtonBuffer1 [i];
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	4926      	ldr	r1, [pc, #152]	@ (8000a3c <button_reading+0xac>)
 80009a2:	5c89      	ldrb	r1, [r1, r2]
 80009a4:	4a26      	ldr	r2, [pc, #152]	@ (8000a40 <button_reading+0xb0>)
 80009a6:	54d1      	strb	r1, [r2, r3]
	debounceButtonBuffer1 [i] = HAL_GPIO_ReadPin(GPIOA, arrayPIN[i]);
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a26      	ldr	r2, [pc, #152]	@ (8000a44 <button_reading+0xb4>)
 80009ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009b0:	79fc      	ldrb	r4, [r7, #7]
 80009b2:	4619      	mov	r1, r3
 80009b4:	4824      	ldr	r0, [pc, #144]	@ (8000a48 <button_reading+0xb8>)
 80009b6:	f000 fec5 	bl	8001744 <HAL_GPIO_ReadPin>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b1f      	ldr	r3, [pc, #124]	@ (8000a3c <button_reading+0xac>)
 80009c0:	551a      	strb	r2, [r3, r4]
	if(debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i])
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a3c <button_reading+0xac>)
 80009c6:	5cd2      	ldrb	r2, [r2, r3]
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	491d      	ldr	r1, [pc, #116]	@ (8000a40 <button_reading+0xb0>)
 80009cc:	5ccb      	ldrb	r3, [r1, r3]
 80009ce:	429a      	cmp	r2, r3
 80009d0:	d105      	bne.n	80009de <button_reading+0x4e>
		buttonBuffer [i] = debounceButtonBuffer1 [i];
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4919      	ldr	r1, [pc, #100]	@ (8000a3c <button_reading+0xac>)
 80009d8:	5c89      	ldrb	r1, [r1, r2]
 80009da:	4a1c      	ldr	r2, [pc, #112]	@ (8000a4c <button_reading+0xbc>)
 80009dc:	54d1      	strb	r1, [r2, r3]
	if(buttonBuffer [i] == BUTTON_IS_PRESSED){
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a4c <button_reading+0xbc>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d114      	bne.n	8000a12 <button_reading+0x82>
		//if a button is pressed, we start counting
		if(counterForButtonPress1s [i] < DURATION_FOR_AUTO_INCREASING){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <button_reading+0xc0>)
 80009ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f0:	2b63      	cmp	r3, #99	@ 0x63
 80009f2:	d809      	bhi.n	8000a08 <button_reading+0x78>
			counterForButtonPress1s [i]++;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4a16      	ldr	r2, [pc, #88]	@ (8000a50 <button_reading+0xc0>)
 80009f8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80009fc:	3201      	adds	r2, #1
 80009fe:	b291      	uxth	r1, r2
 8000a00:	4a13      	ldr	r2, [pc, #76]	@ (8000a50 <button_reading+0xc0>)
 8000a02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000a06:	e00d      	b.n	8000a24 <button_reading+0x94>
		} else {
			//the flag is turned on when 1 second has passed
			//since the button is pressed.
			flagForButtonPress1s [i] = 1;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4a12      	ldr	r2, [pc, #72]	@ (8000a54 <button_reading+0xc4>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	54d1      	strb	r1, [r2, r3]
 8000a10:	e008      	b.n	8000a24 <button_reading+0x94>
		}
	} else {
		counterForButtonPress1s [i] = 0;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a0e      	ldr	r2, [pc, #56]	@ (8000a50 <button_reading+0xc0>)
 8000a16:	2100      	movs	r1, #0
 8000a18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		flagForButtonPress1s [i] = 0;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <button_reading+0xc4>)
 8000a20:	2100      	movs	r1, #0
 8000a22:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < NO_OF_BUTTONS; i ++){
 8000a24:	79fb      	ldrb	r3, [r7, #7]
 8000a26:	3301      	adds	r3, #1
 8000a28:	71fb      	strb	r3, [r7, #7]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d9b5      	bls.n	800099c <button_reading+0xc>
	}
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2000000c 	.word	0x2000000c
 8000a40:	20000010 	.word	0x20000010
 8000a44:	20000014 	.word	0x20000014
 8000a48:	40010800 	.word	0x40010800
 8000a4c:	2000005c 	.word	0x2000005c
 8000a50:	20000064 	.word	0x20000064
 8000a54:	20000060 	.word	0x20000060

08000a58 <is_button_pressed>:

unsigned char 	is_button_pressed(uint8_t index){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d901      	bls.n	8000a6c <is_button_pressed+0x14>
 8000a68:	2300      	movs	r3, #0
 8000a6a:	e007      	b.n	8000a7c <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <is_button_pressed+0x30>)
 8000a70:	5cd3      	ldrb	r3, [r2, r3]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf0c      	ite	eq
 8000a76:	2301      	moveq	r3, #1
 8000a78:	2300      	movne	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000005c 	.word	0x2000005c

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f000 fb6c 	bl	800116c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f80e 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f000 f894 	bl	8000bc4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a9c:	f000 f846 	bl	8000b2c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000aa0:	4803      	ldr	r0, [pc, #12]	@ (8000ab0 <main+0x24>)
 8000aa2:	f001 fac5 	bl	8002030 <HAL_TIM_Base_Start_IT>
  startNormalMode();
 8000aa6:	f7ff fd17 	bl	80004d8 <startNormalMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aaa:	bf00      	nop
 8000aac:	e7fd      	b.n	8000aaa <main+0x1e>
 8000aae:	bf00      	nop
 8000ab0:	2000006c 	.word	0x2000006c

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	@ 0x40
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	2228      	movs	r2, #40	@ 0x28
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f001 fe40 	bl	8002748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ade:	2310      	movs	r3, #16
 8000ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0318 	add.w	r3, r7, #24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fe72 	bl	80017d4 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000af6:	f000 f8dc 	bl	8000cb2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	230f      	movs	r3, #15
 8000afc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f001 f8e0 	bl	8001cd8 <HAL_RCC_ClockConfig>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b1e:	f000 f8c8 	bl	8000cb2 <Error_Handler>
  }
}
 8000b22:	bf00      	nop
 8000b24:	3740      	adds	r7, #64	@ 0x40
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
 8000b3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b48:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000b4a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b50:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000b52:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8000b56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b5e:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000b60:	2209      	movs	r2, #9
 8000b62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b15      	ldr	r3, [pc, #84]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b70:	4813      	ldr	r0, [pc, #76]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000b72:	f001 fa0d 	bl	8001f90 <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b7c:	f000 f899 	bl	8000cb2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480c      	ldr	r0, [pc, #48]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000b8e:	f001 fb8b 	bl	80022a8 <HAL_TIM_ConfigClockSource>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b98:	f000 f88b 	bl	8000cb2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_TIM2_Init+0x94>)
 8000baa:	f001 fd63 	bl	8002674 <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bb4:	f000 f87d 	bl	8000cb2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000006c 	.word	0x2000006c

08000bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 0308 	add.w	r3, r7, #8
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b29      	ldr	r3, [pc, #164]	@ (8000c80 <MX_GPIO_Init+0xbc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <MX_GPIO_Init+0xbc>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b26      	ldr	r3, [pc, #152]	@ (8000c80 <MX_GPIO_Init+0xbc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf0:	4b23      	ldr	r3, [pc, #140]	@ (8000c80 <MX_GPIO_Init+0xbc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	@ (8000c80 <MX_GPIO_Init+0xbc>)
 8000bf6:	f043 0308 	orr.w	r3, r3, #8
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b20      	ldr	r3, [pc, #128]	@ (8000c80 <MX_GPIO_Init+0xbc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0308 	and.w	r3, r3, #8
 8000c04:	603b      	str	r3, [r7, #0]
 8000c06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f24f 11f8 	movw	r1, #61944	@ 0xf1f8
 8000c0e:	481d      	ldr	r0, [pc, #116]	@ (8000c84 <MX_GPIO_Init+0xc0>)
 8000c10:	f000 fdaf 	bl	8001772 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c14:	2200      	movs	r2, #0
 8000c16:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000c1a:	481b      	ldr	r0, [pc, #108]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000c1c:	f000 fda9 	bl	8001772 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 PA5 PA6
                           PA7 PA8 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000c20:	f24f 13f8 	movw	r3, #61944	@ 0xf1f8
 8000c24:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4619      	mov	r1, r3
 8000c38:	4812      	ldr	r0, [pc, #72]	@ (8000c84 <MX_GPIO_Init+0xc0>)
 8000c3a:	f000 fc07 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000c3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c42:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	4619      	mov	r1, r3
 8000c56:	480c      	ldr	r0, [pc, #48]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000c58:	f000 fbf8 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c5c:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8000c60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_GPIO_Init+0xc0>)
 8000c72:	f000 fbeb 	bl	800144c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000
 8000c84:	40010800 	.word	0x40010800
 8000c88:	40010c00 	.word	0x40010c00

08000c8c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM2){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c9c:	d105      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x1e>
		button_reading();
 8000c9e:	f7ff fe77 	bl	8000990 <button_reading>
		fsm_for_input_processing();
 8000ca2:	f7ff fc51 	bl	8000548 <fsm_for_input_processing>
		timerRun();
 8000ca6:	f000 f845 	bl	8000d34 <timerRun>
	}
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb6:	b672      	cpsid	i
}
 8000cb8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cba:	bf00      	nop
 8000cbc:	e7fd      	b.n	8000cba <Error_Handler+0x8>
	...

08000cc0 <setTimer>:
int timer_counter[10];
int timer_flag[10];

//Set the counter for software timer
void setTimer(int index, int duration)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration/TIMER_TICK;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	4a09      	ldr	r2, [pc, #36]	@ (8000cf4 <setTimer+0x34>)
 8000cce:	fb82 1203 	smull	r1, r2, r2, r3
 8000cd2:	1092      	asrs	r2, r2, #2
 8000cd4:	17db      	asrs	r3, r3, #31
 8000cd6:	1ad2      	subs	r2, r2, r3
 8000cd8:	4907      	ldr	r1, [pc, #28]	@ (8000cf8 <setTimer+0x38>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	@ (8000cfc <setTimer+0x3c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	66666667 	.word	0x66666667
 8000cf8:	200000b4 	.word	0x200000b4
 8000cfc:	200000dc 	.word	0x200000dc

08000d00 <isTimerExpired>:

//Check if the timer is expired
int isTimerExpired(int index)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if (timer_flag[index] == 1)
 8000d08:	4a09      	ldr	r2, [pc, #36]	@ (8000d30 <isTimerExpired+0x30>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d106      	bne.n	8000d22 <isTimerExpired+0x22>
	{
		timer_flag[index] = 0;
 8000d14:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <isTimerExpired+0x30>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e000      	b.n	8000d24 <isTimerExpired+0x24>
	}
	return 0;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	200000dc 	.word	0x200000dc

08000d34 <timerRun>:

//Function to be invoked in Timer_ISR
void timerRun()
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
	for (int i = 0; i < MAX_COUNTER; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	e01c      	b.n	8000d7a <timerRun+0x46>
	{
		if (timer_counter[i] > 0)
 8000d40:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <timerRun+0x58>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dd13      	ble.n	8000d74 <timerRun+0x40>
		{
			timer_counter[i]--;
 8000d4c:	4a0f      	ldr	r2, [pc, #60]	@ (8000d8c <timerRun+0x58>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	1e5a      	subs	r2, r3, #1
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <timerRun+0x58>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (timer_counter[i] == 0)
 8000d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8000d8c <timerRun+0x58>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d104      	bne.n	8000d74 <timerRun+0x40>
			{
				timer_flag[i] = 1;
 8000d6a:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <timerRun+0x5c>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2101      	movs	r1, #1
 8000d70:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_COUNTER; i++)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3301      	adds	r3, #1
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b09      	cmp	r3, #9
 8000d7e:	dddf      	ble.n	8000d40 <timerRun+0xc>
			}
		}
	}
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	200000b4 	.word	0x200000b4
 8000d90:	200000dc 	.word	0x200000dc

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a14      	ldr	r2, [pc, #80]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b12      	ldr	r3, [pc, #72]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	4a0e      	ldr	r2, [pc, #56]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	61d3      	str	r3, [r2, #28]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <HAL_MspInit+0x5c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_MspInit+0x60>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_MspInit+0x60>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000

08000df8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e08:	d113      	bne.n	8000e32 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <HAL_TIM_Base_MspInit+0x44>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e3c <HAL_TIM_Base_MspInit+0x44>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	61d3      	str	r3, [r2, #28]
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <HAL_TIM_Base_MspInit+0x44>)
 8000e18:	69db      	ldr	r3, [r3, #28]
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2100      	movs	r1, #0
 8000e26:	201c      	movs	r0, #28
 8000e28:	f000 fad9 	bl	80013de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e2c:	201c      	movs	r0, #28
 8000e2e:	f000 faf2 	bl	8001416 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <NMI_Handler+0x4>

08000e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <MemManage_Handler+0x4>

08000e58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bc80      	pop	{r7}
 8000e7e:	4770      	bx	lr

08000e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f9b2 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e9c:	4802      	ldr	r0, [pc, #8]	@ (8000ea8 <TIM2_IRQHandler+0x10>)
 8000e9e:	f001 f913 	bl	80020c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2000006c 	.word	0x2000006c

08000eac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <updateTrafficLight>:

#include "update_traffic_light.h"



void updateTrafficLight(){
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	displayLED7SEG_MODE(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fad1 	bl	8000464 <displayLED7SEG_MODE>
	switch (traffic_state){
 8000ec2:	4b90      	ldr	r3, [pc, #576]	@ (8001104 <updateTrafficLight+0x24c>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	f200 8119 	bhi.w	80010fe <updateTrafficLight+0x246>
 8000ecc:	a201      	add	r2, pc, #4	@ (adr r2, 8000ed4 <updateTrafficLight+0x1c>)
 8000ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ed2:	bf00      	nop
 8000ed4:	08000ee5 	.word	0x08000ee5
 8000ed8:	08000f5f 	.word	0x08000f5f
 8000edc:	08000fed 	.word	0x08000fed
 8000ee0:	08001065 	.word	0x08001065
	case RED_GREEN:
		 displayLED_RED(1, 0);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff f962 	bl	80001b0 <displayLED_RED>
		 displayLED_GREEN(1, 1);
 8000eec:	2101      	movs	r1, #1
 8000eee:	2001      	movs	r0, #1
 8000ef0:	f7ff f98e 	bl	8000210 <displayLED_GREEN>

		 displayLED_GREEN(0, 0);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2000      	movs	r0, #0
 8000ef8:	f7ff f98a 	bl	8000210 <displayLED_GREEN>
		 displayLED_YELLOW(0, 0);
 8000efc:	2100      	movs	r1, #0
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff f924 	bl	800014c <displayLED_YELLOW>
		 displayLED_YELLOW(0, 1);
 8000f04:	2101      	movs	r1, #1
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff f920 	bl	800014c <displayLED_YELLOW>
		 displayLED_RED(0, 1);
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff f94e 	bl	80001b0 <displayLED_RED>

		 displayLED7SEG_LEFT(time_counter_road1);
 8000f14:	4b7c      	ldr	r3, [pc, #496]	@ (8001108 <updateTrafficLight+0x250>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f9a9 	bl	8000270 <displayLED7SEG_LEFT>
		 displayLED7SEG_TOP(time_counter_road2);
 8000f1e:	4b7b      	ldr	r3, [pc, #492]	@ (800110c <updateTrafficLight+0x254>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa22 	bl	800036c <displayLED7SEG_TOP>

		 if(isTimerExpired(TIMER_TRAFFIC) == 1){
 8000f28:	2000      	movs	r0, #0
 8000f2a:	f7ff fee9 	bl	8000d00 <isTimerExpired>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	f040 80dd 	bne.w	80010f0 <updateTrafficLight+0x238>
			 traffic_state = RED_AMBER;
 8000f36:	4b73      	ldr	r3, [pc, #460]	@ (8001104 <updateTrafficLight+0x24c>)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	701a      	strb	r2, [r3, #0]
			 time_counter_road2 = time_amber/1000;
 8000f3c:	4b74      	ldr	r3, [pc, #464]	@ (8001110 <updateTrafficLight+0x258>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a74      	ldr	r2, [pc, #464]	@ (8001114 <updateTrafficLight+0x25c>)
 8000f42:	fb82 1203 	smull	r1, r2, r2, r3
 8000f46:	1192      	asrs	r2, r2, #6
 8000f48:	17db      	asrs	r3, r3, #31
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	4a6f      	ldr	r2, [pc, #444]	@ (800110c <updateTrafficLight+0x254>)
 8000f4e:	6013      	str	r3, [r2, #0]
			 setTimer(TIMER_TRAFFIC, time_amber);
 8000f50:	4b6f      	ldr	r3, [pc, #444]	@ (8001110 <updateTrafficLight+0x258>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff feb2 	bl	8000cc0 <setTimer>
		 }
		 break;
 8000f5c:	e0c8      	b.n	80010f0 <updateTrafficLight+0x238>

	case RED_AMBER:
		 displayLED_RED(1, 0);
 8000f5e:	2100      	movs	r1, #0
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff f925 	bl	80001b0 <displayLED_RED>
		 displayLED_YELLOW(1, 1);
 8000f66:	2101      	movs	r1, #1
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff f8ef 	bl	800014c <displayLED_YELLOW>

	     displayLED_GREEN(0, 0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff f94d 	bl	8000210 <displayLED_GREEN>
		 displayLED_YELLOW(0, 0);
 8000f76:	2100      	movs	r1, #0
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff f8e7 	bl	800014c <displayLED_YELLOW>
		 displayLED_GREEN(0, 1);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff f945 	bl	8000210 <displayLED_GREEN>
		 displayLED_RED(0, 1);
 8000f86:	2101      	movs	r1, #1
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff f911 	bl	80001b0 <displayLED_RED>

		 displayLED7SEG_LEFT(time_counter_road1);
 8000f8e:	4b5e      	ldr	r3, [pc, #376]	@ (8001108 <updateTrafficLight+0x250>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff f96c 	bl	8000270 <displayLED7SEG_LEFT>
		 displayLED7SEG_TOP(time_counter_road2);
 8000f98:	4b5c      	ldr	r3, [pc, #368]	@ (800110c <updateTrafficLight+0x254>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f9e5 	bl	800036c <displayLED7SEG_TOP>

		 if(isTimerExpired(TIMER_TRAFFIC) == 1){
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	f7ff feac 	bl	8000d00 <isTimerExpired>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	f040 80a2 	bne.w	80010f4 <updateTrafficLight+0x23c>
			 traffic_state = GREEN_RED;
 8000fb0:	4b54      	ldr	r3, [pc, #336]	@ (8001104 <updateTrafficLight+0x24c>)
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	701a      	strb	r2, [r3, #0]
			 time_counter_road1 = time_green / 1000;
 8000fb6:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <updateTrafficLight+0x260>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a56      	ldr	r2, [pc, #344]	@ (8001114 <updateTrafficLight+0x25c>)
 8000fbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc0:	1192      	asrs	r2, r2, #6
 8000fc2:	17db      	asrs	r3, r3, #31
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	4a50      	ldr	r2, [pc, #320]	@ (8001108 <updateTrafficLight+0x250>)
 8000fc8:	6013      	str	r3, [r2, #0]
			 time_counter_road2 = time_red / 1000;
 8000fca:	4b54      	ldr	r3, [pc, #336]	@ (800111c <updateTrafficLight+0x264>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a51      	ldr	r2, [pc, #324]	@ (8001114 <updateTrafficLight+0x25c>)
 8000fd0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fd4:	1192      	asrs	r2, r2, #6
 8000fd6:	17db      	asrs	r3, r3, #31
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a4c      	ldr	r2, [pc, #304]	@ (800110c <updateTrafficLight+0x254>)
 8000fdc:	6013      	str	r3, [r2, #0]
			 setTimer(TIMER_TRAFFIC, time_green);
 8000fde:	4b4e      	ldr	r3, [pc, #312]	@ (8001118 <updateTrafficLight+0x260>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff fe6b 	bl	8000cc0 <setTimer>
		 }
		 break;
 8000fea:	e083      	b.n	80010f4 <updateTrafficLight+0x23c>

	case GREEN_RED:
		  displayLED_RED(1, 1);
 8000fec:	2101      	movs	r1, #1
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff f8de 	bl	80001b0 <displayLED_RED>
		  displayLED_GREEN(1, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f7ff f90a 	bl	8000210 <displayLED_GREEN>

		  displayLED_GREEN(0, 1);
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff f906 	bl	8000210 <displayLED_GREEN>
		  displayLED_YELLOW(0, 0);
 8001004:	2100      	movs	r1, #0
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff f8a0 	bl	800014c <displayLED_YELLOW>
		  displayLED_YELLOW(0, 1);
 800100c:	2101      	movs	r1, #1
 800100e:	2000      	movs	r0, #0
 8001010:	f7ff f89c 	bl	800014c <displayLED_YELLOW>
		  displayLED_RED(0, 0);
 8001014:	2100      	movs	r1, #0
 8001016:	2000      	movs	r0, #0
 8001018:	f7ff f8ca 	bl	80001b0 <displayLED_RED>


		  displayLED7SEG_LEFT(time_counter_road1);
 800101c:	4b3a      	ldr	r3, [pc, #232]	@ (8001108 <updateTrafficLight+0x250>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff f925 	bl	8000270 <displayLED7SEG_LEFT>
		  displayLED7SEG_TOP(time_counter_road2);
 8001026:	4b39      	ldr	r3, [pc, #228]	@ (800110c <updateTrafficLight+0x254>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f99e 	bl	800036c <displayLED7SEG_TOP>

		  if(isTimerExpired(TIMER_TRAFFIC) == 1){
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff fe65 	bl	8000d00 <isTimerExpired>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d15d      	bne.n	80010f8 <updateTrafficLight+0x240>
			  traffic_state = AMBER_RED;
 800103c:	4b31      	ldr	r3, [pc, #196]	@ (8001104 <updateTrafficLight+0x24c>)
 800103e:	2203      	movs	r2, #3
 8001040:	701a      	strb	r2, [r3, #0]
			  time_counter_road1 = time_amber / 1000;
 8001042:	4b33      	ldr	r3, [pc, #204]	@ (8001110 <updateTrafficLight+0x258>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a33      	ldr	r2, [pc, #204]	@ (8001114 <updateTrafficLight+0x25c>)
 8001048:	fb82 1203 	smull	r1, r2, r2, r3
 800104c:	1192      	asrs	r2, r2, #6
 800104e:	17db      	asrs	r3, r3, #31
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	4a2d      	ldr	r2, [pc, #180]	@ (8001108 <updateTrafficLight+0x250>)
 8001054:	6013      	str	r3, [r2, #0]
			  setTimer(TIMER_TRAFFIC, time_amber);
 8001056:	4b2e      	ldr	r3, [pc, #184]	@ (8001110 <updateTrafficLight+0x258>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4619      	mov	r1, r3
 800105c:	2000      	movs	r0, #0
 800105e:	f7ff fe2f 	bl	8000cc0 <setTimer>
		  }
		  break;
 8001062:	e049      	b.n	80010f8 <updateTrafficLight+0x240>

	case AMBER_RED:
		 displayLED_YELLOW(1, 0);
 8001064:	2100      	movs	r1, #0
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff f870 	bl	800014c <displayLED_YELLOW>
		 displayLED_RED(1, 1);
 800106c:	2101      	movs	r1, #1
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff f89e 	bl	80001b0 <displayLED_RED>

		 displayLED_GREEN(0, 1);
 8001074:	2101      	movs	r1, #1
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff f8ca 	bl	8000210 <displayLED_GREEN>
		 displayLED_GREEN(0, 0);
 800107c:	2100      	movs	r1, #0
 800107e:	2000      	movs	r0, #0
 8001080:	f7ff f8c6 	bl	8000210 <displayLED_GREEN>
		 displayLED_YELLOW(0, 1);
 8001084:	2101      	movs	r1, #1
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff f860 	bl	800014c <displayLED_YELLOW>
		 displayLED_RED(0, 0);
 800108c:	2100      	movs	r1, #0
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff f88e 	bl	80001b0 <displayLED_RED>

		 displayLED7SEG_LEFT(time_counter_road1);
 8001094:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <updateTrafficLight+0x250>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f8e9 	bl	8000270 <displayLED7SEG_LEFT>
		 displayLED7SEG_TOP(time_counter_road2);
 800109e:	4b1b      	ldr	r3, [pc, #108]	@ (800110c <updateTrafficLight+0x254>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f962 	bl	800036c <displayLED7SEG_TOP>

		 if (isTimerExpired(TIMER_TRAFFIC) == 1){
 80010a8:	2000      	movs	r0, #0
 80010aa:	f7ff fe29 	bl	8000d00 <isTimerExpired>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d123      	bne.n	80010fc <updateTrafficLight+0x244>
			 traffic_state = RED_GREEN;
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <updateTrafficLight+0x24c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	701a      	strb	r2, [r3, #0]
			 time_counter_road1 = time_red / 1000;
 80010ba:	4b18      	ldr	r3, [pc, #96]	@ (800111c <updateTrafficLight+0x264>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a15      	ldr	r2, [pc, #84]	@ (8001114 <updateTrafficLight+0x25c>)
 80010c0:	fb82 1203 	smull	r1, r2, r2, r3
 80010c4:	1192      	asrs	r2, r2, #6
 80010c6:	17db      	asrs	r3, r3, #31
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001108 <updateTrafficLight+0x250>)
 80010cc:	6013      	str	r3, [r2, #0]
			 time_counter_road2 = time_green / 1000;
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <updateTrafficLight+0x260>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <updateTrafficLight+0x25c>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1192      	asrs	r2, r2, #6
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	4a0b      	ldr	r2, [pc, #44]	@ (800110c <updateTrafficLight+0x254>)
 80010e0:	6013      	str	r3, [r2, #0]
			 setTimer(TIMER_TRAFFIC, time_green);
 80010e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <updateTrafficLight+0x260>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff fde9 	bl	8000cc0 <setTimer>
		 }
		 break;
 80010ee:	e005      	b.n	80010fc <updateTrafficLight+0x244>
		 break;
 80010f0:	bf00      	nop
 80010f2:	e004      	b.n	80010fe <updateTrafficLight+0x246>
		 break;
 80010f4:	bf00      	nop
 80010f6:	e002      	b.n	80010fe <updateTrafficLight+0x246>
		  break;
 80010f8:	bf00      	nop
 80010fa:	e000      	b.n	80010fe <updateTrafficLight+0x246>
		 break;
 80010fc:	bf00      	nop
	}
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000044 	.word	0x20000044
 8001108:	20000054 	.word	0x20000054
 800110c:	20000058 	.word	0x20000058
 8001110:	20000004 	.word	0x20000004
 8001114:	10624dd3 	.word	0x10624dd3
 8001118:	20000008 	.word	0x20000008
 800111c:	20000000 	.word	0x20000000

08001120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001120:	f7ff fec4 	bl	8000eac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480b      	ldr	r0, [pc, #44]	@ (8001154 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001126:	490c      	ldr	r1, [pc, #48]	@ (8001158 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001128:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <LoopFillZerobss+0x16>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800113c:	4c09      	ldr	r4, [pc, #36]	@ (8001164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f001 fb05 	bl	8002758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800114e:	f7ff fc9d 	bl	8000a8c <main>
  bx lr
 8001152:	4770      	bx	lr
  ldr r0, =_sdata
 8001154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001158:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 800115c:	080027e4 	.word	0x080027e4
  ldr r2, =_sbss
 8001160:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001164:	20000108 	.word	0x20000108

08001168 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001168:	e7fe      	b.n	8001168 <ADC1_2_IRQHandler>
	...

0800116c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <HAL_Init+0x28>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <HAL_Init+0x28>)
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800117c:	2003      	movs	r0, #3
 800117e:	f000 f923 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001182:	200f      	movs	r0, #15
 8001184:	f000 f808 	bl	8001198 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001188:	f7ff fe04 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a0:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <HAL_InitTick+0x54>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b12      	ldr	r3, [pc, #72]	@ (80011f0 <HAL_InitTick+0x58>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f93b 	bl	8001432 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f903 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_InitTick+0x5c>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000001c 	.word	0x2000001c
 80011f0:	20000024 	.word	0x20000024
 80011f4:	20000020 	.word	0x20000020

080011f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011fc:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <HAL_IncTick+0x1c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <HAL_IncTick+0x20>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a03      	ldr	r2, [pc, #12]	@ (8001218 <HAL_IncTick+0x20>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr
 8001214:	20000024 	.word	0x20000024
 8001218:	20000104 	.word	0x20000104

0800121c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return uwTick;
 8001220:	4b02      	ldr	r3, [pc, #8]	@ (800122c <HAL_GetTick+0x10>)
 8001222:	681b      	ldr	r3, [r3, #0]
}
 8001224:	4618      	mov	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	20000104 	.word	0x20000104

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	@ (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4906      	ldr	r1, [pc, #24]	@ (80012c8 <__NVIC_EnableIRQ+0x34>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	@ (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	@ (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	@ 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	@ 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff90 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff2d 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff42 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff90 	bl	8001320 <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5f 	bl	80012cc <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	4603      	mov	r3, r0
 800141e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff35 	bl	8001294 <__NVIC_EnableIRQ>
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffa2 	bl	8001384 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b08b      	sub	sp, #44	@ 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e161      	b.n	8001724 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001460:	2201      	movs	r2, #1
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	69fa      	ldr	r2, [r7, #28]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	429a      	cmp	r2, r3
 800147a:	f040 8150 	bne.w	800171e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a97      	ldr	r2, [pc, #604]	@ (80016e0 <HAL_GPIO_Init+0x294>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d05e      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001488:	4a95      	ldr	r2, [pc, #596]	@ (80016e0 <HAL_GPIO_Init+0x294>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d875      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800148e:	4a95      	ldr	r2, [pc, #596]	@ (80016e4 <HAL_GPIO_Init+0x298>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d058      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 8001494:	4a93      	ldr	r2, [pc, #588]	@ (80016e4 <HAL_GPIO_Init+0x298>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d86f      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 800149a:	4a93      	ldr	r2, [pc, #588]	@ (80016e8 <HAL_GPIO_Init+0x29c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d052      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014a0:	4a91      	ldr	r2, [pc, #580]	@ (80016e8 <HAL_GPIO_Init+0x29c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d869      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014a6:	4a91      	ldr	r2, [pc, #580]	@ (80016ec <HAL_GPIO_Init+0x2a0>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d04c      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014ac:	4a8f      	ldr	r2, [pc, #572]	@ (80016ec <HAL_GPIO_Init+0x2a0>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d863      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014b2:	4a8f      	ldr	r2, [pc, #572]	@ (80016f0 <HAL_GPIO_Init+0x2a4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d046      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
 80014b8:	4a8d      	ldr	r2, [pc, #564]	@ (80016f0 <HAL_GPIO_Init+0x2a4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d85d      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014be:	2b12      	cmp	r3, #18
 80014c0:	d82a      	bhi.n	8001518 <HAL_GPIO_Init+0xcc>
 80014c2:	2b12      	cmp	r3, #18
 80014c4:	d859      	bhi.n	800157a <HAL_GPIO_Init+0x12e>
 80014c6:	a201      	add	r2, pc, #4	@ (adr r2, 80014cc <HAL_GPIO_Init+0x80>)
 80014c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014cc:	08001547 	.word	0x08001547
 80014d0:	08001521 	.word	0x08001521
 80014d4:	08001533 	.word	0x08001533
 80014d8:	08001575 	.word	0x08001575
 80014dc:	0800157b 	.word	0x0800157b
 80014e0:	0800157b 	.word	0x0800157b
 80014e4:	0800157b 	.word	0x0800157b
 80014e8:	0800157b 	.word	0x0800157b
 80014ec:	0800157b 	.word	0x0800157b
 80014f0:	0800157b 	.word	0x0800157b
 80014f4:	0800157b 	.word	0x0800157b
 80014f8:	0800157b 	.word	0x0800157b
 80014fc:	0800157b 	.word	0x0800157b
 8001500:	0800157b 	.word	0x0800157b
 8001504:	0800157b 	.word	0x0800157b
 8001508:	0800157b 	.word	0x0800157b
 800150c:	0800157b 	.word	0x0800157b
 8001510:	08001529 	.word	0x08001529
 8001514:	0800153d 	.word	0x0800153d
 8001518:	4a76      	ldr	r2, [pc, #472]	@ (80016f4 <HAL_GPIO_Init+0x2a8>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d013      	beq.n	8001546 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800151e:	e02c      	b.n	800157a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	623b      	str	r3, [r7, #32]
          break;
 8001526:	e029      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	3304      	adds	r3, #4
 800152e:	623b      	str	r3, [r7, #32]
          break;
 8001530:	e024      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	3308      	adds	r3, #8
 8001538:	623b      	str	r3, [r7, #32]
          break;
 800153a:	e01f      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	330c      	adds	r3, #12
 8001542:	623b      	str	r3, [r7, #32]
          break;
 8001544:	e01a      	b.n	800157c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d102      	bne.n	8001554 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800154e:	2304      	movs	r3, #4
 8001550:	623b      	str	r3, [r7, #32]
          break;
 8001552:	e013      	b.n	800157c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d105      	bne.n	8001568 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800155c:	2308      	movs	r3, #8
 800155e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	611a      	str	r2, [r3, #16]
          break;
 8001566:	e009      	b.n	800157c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001568:	2308      	movs	r3, #8
 800156a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	615a      	str	r2, [r3, #20]
          break;
 8001572:	e003      	b.n	800157c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001574:	2300      	movs	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
          break;
 8001578:	e000      	b.n	800157c <HAL_GPIO_Init+0x130>
          break;
 800157a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	2bff      	cmp	r3, #255	@ 0xff
 8001580:	d801      	bhi.n	8001586 <HAL_GPIO_Init+0x13a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	e001      	b.n	800158a <HAL_GPIO_Init+0x13e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	3304      	adds	r3, #4
 800158a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2bff      	cmp	r3, #255	@ 0xff
 8001590:	d802      	bhi.n	8001598 <HAL_GPIO_Init+0x14c>
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x152>
 8001598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159a:	3b08      	subs	r3, #8
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	210f      	movs	r1, #15
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	6a39      	ldr	r1, [r7, #32]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	431a      	orrs	r2, r3
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f000 80a9 	beq.w	800171e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015cc:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <HAL_GPIO_Init+0x2ac>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4a49      	ldr	r2, [pc, #292]	@ (80016f8 <HAL_GPIO_Init+0x2ac>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <HAL_GPIO_Init+0x2ac>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e4:	4a45      	ldr	r2, [pc, #276]	@ (80016fc <HAL_GPIO_Init+0x2b0>)
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	f003 0303 	and.w	r3, r3, #3
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	220f      	movs	r2, #15
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	43db      	mvns	r3, r3
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a3d      	ldr	r2, [pc, #244]	@ (8001700 <HAL_GPIO_Init+0x2b4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x1e0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a3c      	ldr	r2, [pc, #240]	@ (8001704 <HAL_GPIO_Init+0x2b8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x1dc>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a3b      	ldr	r2, [pc, #236]	@ (8001708 <HAL_GPIO_Init+0x2bc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x1d8>
 8001620:	2302      	movs	r3, #2
 8001622:	e004      	b.n	800162e <HAL_GPIO_Init+0x1e2>
 8001624:	2303      	movs	r3, #3
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x1e2>
 8001628:	2301      	movs	r3, #1
 800162a:	e000      	b.n	800162e <HAL_GPIO_Init+0x1e2>
 800162c:	2300      	movs	r3, #0
 800162e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001630:	f002 0203 	and.w	r2, r2, #3
 8001634:	0092      	lsls	r2, r2, #2
 8001636:	4093      	lsls	r3, r2
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800163e:	492f      	ldr	r1, [pc, #188]	@ (80016fc <HAL_GPIO_Init+0x2b0>)
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	089b      	lsrs	r3, r3, #2
 8001644:	3302      	adds	r3, #2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001658:	4b2c      	ldr	r3, [pc, #176]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	492b      	ldr	r1, [pc, #172]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001666:	4b29      	ldr	r3, [pc, #164]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	43db      	mvns	r3, r3
 800166e:	4927      	ldr	r1, [pc, #156]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 8001670:	4013      	ands	r3, r2
 8001672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001680:	4b22      	ldr	r3, [pc, #136]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	4921      	ldr	r1, [pc, #132]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	60cb      	str	r3, [r1, #12]
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800168e:	4b1f      	ldr	r3, [pc, #124]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	43db      	mvns	r3, r3
 8001696:	491d      	ldr	r1, [pc, #116]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 8001698:	4013      	ands	r3, r2
 800169a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d006      	beq.n	80016b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	4917      	ldr	r1, [pc, #92]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016b6:	4b15      	ldr	r3, [pc, #84]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 80016b8:	685a      	ldr	r2, [r3, #4]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	43db      	mvns	r3, r3
 80016be:	4913      	ldr	r1, [pc, #76]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d01f      	beq.n	8001710 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016d0:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	490d      	ldr	r1, [pc, #52]	@ (800170c <HAL_GPIO_Init+0x2c0>)
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	600b      	str	r3, [r1, #0]
 80016dc:	e01f      	b.n	800171e <HAL_GPIO_Init+0x2d2>
 80016de:	bf00      	nop
 80016e0:	10320000 	.word	0x10320000
 80016e4:	10310000 	.word	0x10310000
 80016e8:	10220000 	.word	0x10220000
 80016ec:	10210000 	.word	0x10210000
 80016f0:	10120000 	.word	0x10120000
 80016f4:	10110000 	.word	0x10110000
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40010000 	.word	0x40010000
 8001700:	40010800 	.word	0x40010800
 8001704:	40010c00 	.word	0x40010c00
 8001708:	40011000 	.word	0x40011000
 800170c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001710:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_GPIO_Init+0x2f4>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	43db      	mvns	r3, r3
 8001718:	4909      	ldr	r1, [pc, #36]	@ (8001740 <HAL_GPIO_Init+0x2f4>)
 800171a:	4013      	ands	r3, r2
 800171c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	3301      	adds	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	fa22 f303 	lsr.w	r3, r2, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	f47f ae96 	bne.w	8001460 <HAL_GPIO_Init+0x14>
  }
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	372c      	adds	r7, #44	@ 0x2c
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40010400 	.word	0x40010400

08001744 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	887b      	ldrh	r3, [r7, #2]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800175c:	2301      	movs	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr

08001772 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	460b      	mov	r3, r1
 800177c:	807b      	strh	r3, [r7, #2]
 800177e:	4613      	mov	r3, r2
 8001780:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001782:	787b      	ldrb	r3, [r7, #1]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d003      	beq.n	8001790 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001788:	887a      	ldrh	r2, [r7, #2]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800178e:	e003      	b.n	8001798 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	041a      	lsls	r2, r3, #16
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	611a      	str	r2, [r3, #16]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b4:	887a      	ldrh	r2, [r7, #2]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	041a      	lsls	r2, r3, #16
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43d9      	mvns	r1, r3
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	400b      	ands	r3, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	611a      	str	r2, [r3, #16]
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d101      	bne.n	80017e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e272      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8087 	beq.w	8001902 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f4:	4b92      	ldr	r3, [pc, #584]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b04      	cmp	r3, #4
 80017fe:	d00c      	beq.n	800181a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001800:	4b8f      	ldr	r3, [pc, #572]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 030c 	and.w	r3, r3, #12
 8001808:	2b08      	cmp	r3, #8
 800180a:	d112      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
 800180c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001818:	d10b      	bne.n	8001832 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181a:	4b89      	ldr	r3, [pc, #548]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d06c      	beq.n	8001900 <HAL_RCC_OscConfig+0x12c>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d168      	bne.n	8001900 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e24c      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x76>
 800183c:	4b80      	ldr	r3, [pc, #512]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a7f      	ldr	r2, [pc, #508]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e02e      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0x98>
 8001852:	4b7b      	ldr	r3, [pc, #492]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a7a      	ldr	r2, [pc, #488]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001858:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b78      	ldr	r3, [pc, #480]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a77      	ldr	r2, [pc, #476]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001864:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e01d      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0xbc>
 8001876:	4b72      	ldr	r3, [pc, #456]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a71      	ldr	r2, [pc, #452]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800187c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b6f      	ldr	r3, [pc, #444]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6e      	ldr	r2, [pc, #440]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0xd4>
 8001890:	4b6b      	ldr	r3, [pc, #428]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a6a      	ldr	r2, [pc, #424]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001896:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b68      	ldr	r3, [pc, #416]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a67      	ldr	r2, [pc, #412]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d013      	beq.n	80018d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fcb4 	bl	800121c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b8:	f7ff fcb0 	bl	800121c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	@ 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e200      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe4>
 80018d6:	e014      	b.n	8001902 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d8:	f7ff fca0 	bl	800121c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff fc9c 	bl	800121c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	@ 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e1ec      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	4b53      	ldr	r3, [pc, #332]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x10c>
 80018fe:	e000      	b.n	8001902 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d063      	beq.n	80019d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800190e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00b      	beq.n	8001932 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800191a:	4b49      	ldr	r3, [pc, #292]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b08      	cmp	r3, #8
 8001924:	d11c      	bne.n	8001960 <HAL_RCC_OscConfig+0x18c>
 8001926:	4b46      	ldr	r3, [pc, #280]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d116      	bne.n	8001960 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001932:	4b43      	ldr	r3, [pc, #268]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d005      	beq.n	800194a <HAL_RCC_OscConfig+0x176>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e1c0      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	695b      	ldr	r3, [r3, #20]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4939      	ldr	r1, [pc, #228]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800195a:	4313      	orrs	r3, r2
 800195c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195e:	e03a      	b.n	80019d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d020      	beq.n	80019aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001968:	4b36      	ldr	r3, [pc, #216]	@ (8001a44 <HAL_RCC_OscConfig+0x270>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196e:	f7ff fc55 	bl	800121c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff fc51 	bl	800121c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e1a1      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	4b2d      	ldr	r3, [pc, #180]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b2a      	ldr	r3, [pc, #168]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	4927      	ldr	r1, [pc, #156]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	600b      	str	r3, [r1, #0]
 80019a8:	e015      	b.n	80019d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	4b26      	ldr	r3, [pc, #152]	@ (8001a44 <HAL_RCC_OscConfig+0x270>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fc34 	bl	800121c <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b8:	f7ff fc30 	bl	800121c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e180      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1f0      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d03a      	beq.n	8001a58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d019      	beq.n	8001a1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ea:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019f0:	f7ff fc14 	bl	800121c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f8:	f7ff fc10 	bl	800121c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e160      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a40 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f000 fa9c 	bl	8001f54 <RCC_Delay>
 8001a1c:	e01c      	b.n	8001a58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_RCC_OscConfig+0x274>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a24:	f7ff fbfa 	bl	800121c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2a:	e00f      	b.n	8001a4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fbf6 	bl	800121c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d908      	bls.n	8001a4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e146      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
 8001a3e:	bf00      	nop
 8001a40:	40021000 	.word	0x40021000
 8001a44:	42420000 	.word	0x42420000
 8001a48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	4b92      	ldr	r3, [pc, #584]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1e9      	bne.n	8001a2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	f000 80a6 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6a:	4b8b      	ldr	r3, [pc, #556]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10d      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	4b88      	ldr	r3, [pc, #544]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	4a87      	ldr	r2, [pc, #540]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a80:	61d3      	str	r3, [r2, #28]
 8001a82:	4b85      	ldr	r3, [pc, #532]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	4b82      	ldr	r3, [pc, #520]	@ (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d118      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a7e      	ldr	r2, [pc, #504]	@ (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fbb7 	bl	800121c <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab2:	f7ff fbb3 	bl	800121c <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b64      	cmp	r3, #100	@ 0x64
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e103      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	4b75      	ldr	r3, [pc, #468]	@ (8001c9c <HAL_RCC_OscConfig+0x4c8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d106      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x312>
 8001ad8:	4b6f      	ldr	r3, [pc, #444]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4a6e      	ldr	r2, [pc, #440]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6213      	str	r3, [r2, #32]
 8001ae4:	e02d      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x334>
 8001aee:	4b6a      	ldr	r3, [pc, #424]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4a69      	ldr	r2, [pc, #420]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f023 0301 	bic.w	r3, r3, #1
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	4b67      	ldr	r3, [pc, #412]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4a66      	ldr	r2, [pc, #408]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	e01c      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d10c      	bne.n	8001b2a <HAL_RCC_OscConfig+0x356>
 8001b10:	4b61      	ldr	r3, [pc, #388]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	4a60      	ldr	r2, [pc, #384]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6213      	str	r3, [r2, #32]
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6213      	str	r3, [r2, #32]
 8001b28:	e00b      	b.n	8001b42 <HAL_RCC_OscConfig+0x36e>
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a5a      	ldr	r2, [pc, #360]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	f023 0301 	bic.w	r3, r3, #1
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	4b58      	ldr	r3, [pc, #352]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a57      	ldr	r2, [pc, #348]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	f023 0304 	bic.w	r3, r3, #4
 8001b40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d015      	beq.n	8001b76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b4a:	f7ff fb67 	bl	800121c <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff fb63 	bl	800121c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0b1      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	4b4b      	ldr	r3, [pc, #300]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ee      	beq.n	8001b52 <HAL_RCC_OscConfig+0x37e>
 8001b74:	e014      	b.n	8001ba0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb51 	bl	800121c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff fb4d 	bl	800121c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e09b      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b94:	4b40      	ldr	r3, [pc, #256]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1ee      	bne.n	8001b7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d105      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba6:	4b3c      	ldr	r3, [pc, #240]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	4a3b      	ldr	r2, [pc, #236]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 8087 	beq.w	8001cca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbc:	4b36      	ldr	r3, [pc, #216]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 030c 	and.w	r3, r3, #12
 8001bc4:	2b08      	cmp	r3, #8
 8001bc6:	d061      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d146      	bne.n	8001c5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd0:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd6:	f7ff fb21 	bl	800121c <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bde:	f7ff fb1d 	bl	800121c <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e06d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf0:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1f0      	bne.n	8001bde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c04:	d108      	bne.n	8001c18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c06:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	4921      	ldr	r1, [pc, #132]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c18:	4b1f      	ldr	r3, [pc, #124]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a19      	ldr	r1, [r3, #32]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	491b      	ldr	r1, [pc, #108]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7ff faf1 	bl	800121c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7ff faed 	bl	800121c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e03d      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x46a>
 8001c5c:	e035      	b.n	8001cca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_RCC_OscConfig+0x4cc>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c64:	f7ff fada 	bl	800121c <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7ff fad6 	bl	800121c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e026      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x498>
 8001c8a:	e01e      	b.n	8001cca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e019      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd4 <HAL_RCC_OscConfig+0x500>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d106      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0d0      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cec:	4b6a      	ldr	r3, [pc, #424]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d910      	bls.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b67      	ldr	r3, [pc, #412]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0207 	bic.w	r2, r3, #7
 8001d02:	4965      	ldr	r1, [pc, #404]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b63      	ldr	r3, [pc, #396]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0b8      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d020      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	4b59      	ldr	r3, [pc, #356]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4a58      	ldr	r2, [pc, #352]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0308 	and.w	r3, r3, #8
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d4c:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	4a52      	ldr	r2, [pc, #328]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d58:	4b50      	ldr	r3, [pc, #320]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	494d      	ldr	r1, [pc, #308]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d040      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d107      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7e:	4b47      	ldr	r3, [pc, #284]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d115      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e07f      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d96:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d109      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e073      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da6:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e06b      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001db6:	4b39      	ldr	r3, [pc, #228]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f023 0203 	bic.w	r2, r3, #3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4936      	ldr	r1, [pc, #216]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dc8:	f7ff fa28 	bl	800121c <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	e00a      	b.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd0:	f7ff fa24 	bl	800121c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e053      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001de6:	4b2d      	ldr	r3, [pc, #180]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 020c 	and.w	r2, r3, #12
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d1eb      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d210      	bcs.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4922      	ldr	r1, [pc, #136]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e032      	b.n	8001e8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d008      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4916      	ldr	r1, [pc, #88]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d009      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e52:	4b12      	ldr	r3, [pc, #72]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	490e      	ldr	r1, [pc, #56]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e66:	f000 f821 	bl	8001eac <HAL_RCC_GetSysClockFreq>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	091b      	lsrs	r3, r3, #4
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	490a      	ldr	r1, [pc, #40]	@ (8001ea0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e78:	5ccb      	ldrb	r3, [r1, r3]
 8001e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ea4 <HAL_RCC_ClockConfig+0x1cc>)
 8001e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e82:	4b09      	ldr	r3, [pc, #36]	@ (8001ea8 <HAL_RCC_ClockConfig+0x1d0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff f986 	bl	8001198 <HAL_InitTick>

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	080027b8 	.word	0x080027b8
 8001ea4:	2000001c 	.word	0x2000001c
 8001ea8:	20000020 	.word	0x20000020

08001eac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d002      	beq.n	8001edc <HAL_RCC_GetSysClockFreq+0x30>
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d003      	beq.n	8001ee2 <HAL_RCC_GetSysClockFreq+0x36>
 8001eda:	e027      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ede:	613b      	str	r3, [r7, #16]
      break;
 8001ee0:	e027      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	0c9b      	lsrs	r3, r3, #18
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	4a17      	ldr	r2, [pc, #92]	@ (8001f48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	0c5b      	lsrs	r3, r3, #17
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	4a11      	ldr	r2, [pc, #68]	@ (8001f4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	fb03 f202 	mul.w	r2, r3, r2
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e004      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	613b      	str	r3, [r7, #16]
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2e:	613b      	str	r3, [r7, #16]
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	693b      	ldr	r3, [r7, #16]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	371c      	adds	r7, #28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	007a1200 	.word	0x007a1200
 8001f48:	080027c8 	.word	0x080027c8
 8001f4c:	080027d8 	.word	0x080027d8
 8001f50:	003d0900 	.word	0x003d0900

08001f54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <RCC_Delay+0x34>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <RCC_Delay+0x38>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0a5b      	lsrs	r3, r3, #9
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f70:	bf00      	nop
  }
  while (Delay --);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	1e5a      	subs	r2, r3, #1
 8001f76:	60fa      	str	r2, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1f9      	bne.n	8001f70 <RCC_Delay+0x1c>
}
 8001f7c:	bf00      	nop
 8001f7e:	bf00      	nop
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	2000001c 	.word	0x2000001c
 8001f8c:	10624dd3 	.word	0x10624dd3

08001f90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e041      	b.n	8002026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d106      	bne.n	8001fbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7fe ff1e 	bl	8000df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f000 fa56 	bl	8002480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b01      	cmp	r3, #1
 8002042:	d001      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e035      	b.n	80020b4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a16      	ldr	r2, [pc, #88]	@ (80020c0 <HAL_TIM_Base_Start_IT+0x90>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_TIM_Base_Start_IT+0x4e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002072:	d004      	beq.n	800207e <HAL_TIM_Base_Start_IT+0x4e>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a12      	ldr	r2, [pc, #72]	@ (80020c4 <HAL_TIM_Base_Start_IT+0x94>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d111      	bne.n	80020a2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2b06      	cmp	r3, #6
 800208e:	d010      	beq.n	80020b2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0201 	orr.w	r2, r2, #1
 800209e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020a0:	e007      	b.n	80020b2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0201 	orr.w	r2, r2, #1
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40012c00 	.word	0x40012c00
 80020c4:	40000400 	.word	0x40000400

080020c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d020      	beq.n	800212c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0202 	mvn.w	r2, #2
 80020fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f998 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
 8002118:	e005      	b.n	8002126 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f98b 	bl	8002436 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f99a 	bl	800245a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d020      	beq.n	8002178 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d01b      	beq.n	8002178 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f06f 0204 	mvn.w	r2, #4
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2202      	movs	r2, #2
 800214e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f972 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
 8002164:	e005      	b.n	8002172 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f965 	bl	8002436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f974 	bl	800245a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d020      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d01b      	beq.n	80021c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f06f 0208 	mvn.w	r2, #8
 8002194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2204      	movs	r2, #4
 800219a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f94c 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
 80021b0:	e005      	b.n	80021be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f93f 	bl	8002436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f94e 	bl	800245a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d020      	beq.n	8002210 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01b      	beq.n	8002210 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0210 	mvn.w	r2, #16
 80021e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2208      	movs	r2, #8
 80021e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f926 	bl	8002448 <HAL_TIM_IC_CaptureCallback>
 80021fc:	e005      	b.n	800220a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f919 	bl	8002436 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 f928 	bl	800245a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d007      	beq.n	8002234 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f06f 0201 	mvn.w	r2, #1
 800222c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f7fe fd2c 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fa6f 	bl	8002736 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00c      	beq.n	800227c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f8f8 	bl	800246c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f003 0320 	and.w	r3, r3, #32
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00c      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f003 0320 	and.w	r3, r3, #32
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0220 	mvn.w	r2, #32
 8002298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fa42 	bl	8002724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_TIM_ConfigClockSource+0x1c>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e0b4      	b.n	800242e <HAL_TIM_ConfigClockSource+0x186>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022fc:	d03e      	beq.n	800237c <HAL_TIM_ConfigClockSource+0xd4>
 80022fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002302:	f200 8087 	bhi.w	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 8002306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800230a:	f000 8086 	beq.w	800241a <HAL_TIM_ConfigClockSource+0x172>
 800230e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002312:	d87f      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b70      	cmp	r3, #112	@ 0x70
 8002316:	d01a      	beq.n	800234e <HAL_TIM_ConfigClockSource+0xa6>
 8002318:	2b70      	cmp	r3, #112	@ 0x70
 800231a:	d87b      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b60      	cmp	r3, #96	@ 0x60
 800231e:	d050      	beq.n	80023c2 <HAL_TIM_ConfigClockSource+0x11a>
 8002320:	2b60      	cmp	r3, #96	@ 0x60
 8002322:	d877      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 8002324:	2b50      	cmp	r3, #80	@ 0x50
 8002326:	d03c      	beq.n	80023a2 <HAL_TIM_ConfigClockSource+0xfa>
 8002328:	2b50      	cmp	r3, #80	@ 0x50
 800232a:	d873      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 800232c:	2b40      	cmp	r3, #64	@ 0x40
 800232e:	d058      	beq.n	80023e2 <HAL_TIM_ConfigClockSource+0x13a>
 8002330:	2b40      	cmp	r3, #64	@ 0x40
 8002332:	d86f      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 8002334:	2b30      	cmp	r3, #48	@ 0x30
 8002336:	d064      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x15a>
 8002338:	2b30      	cmp	r3, #48	@ 0x30
 800233a:	d86b      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 800233c:	2b20      	cmp	r3, #32
 800233e:	d060      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x15a>
 8002340:	2b20      	cmp	r3, #32
 8002342:	d867      	bhi.n	8002414 <HAL_TIM_ConfigClockSource+0x16c>
 8002344:	2b00      	cmp	r3, #0
 8002346:	d05c      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x15a>
 8002348:	2b10      	cmp	r3, #16
 800234a:	d05a      	beq.n	8002402 <HAL_TIM_ConfigClockSource+0x15a>
 800234c:	e062      	b.n	8002414 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800235e:	f000 f96a 	bl	8002636 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	609a      	str	r2, [r3, #8]
      break;
 800237a:	e04f      	b.n	800241c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800238c:	f000 f953 	bl	8002636 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800239e:	609a      	str	r2, [r3, #8]
      break;
 80023a0:	e03c      	b.n	800241c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ae:	461a      	mov	r2, r3
 80023b0:	f000 f8ca 	bl	8002548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2150      	movs	r1, #80	@ 0x50
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f921 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 80023c0:	e02c      	b.n	800241c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023ce:	461a      	mov	r2, r3
 80023d0:	f000 f8e8 	bl	80025a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2160      	movs	r1, #96	@ 0x60
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f911 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 80023e0:	e01c      	b.n	800241c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ee:	461a      	mov	r2, r3
 80023f0:	f000 f8aa 	bl	8002548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2140      	movs	r1, #64	@ 0x40
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f901 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 8002400:	e00c      	b.n	800241c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	4610      	mov	r0, r2
 800240e:	f000 f8f8 	bl	8002602 <TIM_ITRx_SetConfig>
      break;
 8002412:	e003      	b.n	800241c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      break;
 8002418:	e000      	b.n	800241c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800241a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr

08002448 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr

0800245a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002462:	bf00      	nop
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr

0800246c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
	...

08002480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a2b      	ldr	r2, [pc, #172]	@ (8002540 <TIM_Base_SetConfig+0xc0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <TIM_Base_SetConfig+0x28>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800249e:	d003      	beq.n	80024a8 <TIM_Base_SetConfig+0x28>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	4a28      	ldr	r2, [pc, #160]	@ (8002544 <TIM_Base_SetConfig+0xc4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d108      	bne.n	80024ba <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a20      	ldr	r2, [pc, #128]	@ (8002540 <TIM_Base_SetConfig+0xc0>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <TIM_Base_SetConfig+0x52>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c8:	d003      	beq.n	80024d2 <TIM_Base_SetConfig+0x52>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002544 <TIM_Base_SetConfig+0xc4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d108      	bne.n	80024e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <TIM_Base_SetConfig+0xc0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d103      	bne.n	8002518 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	f023 0201 	bic.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]
  }
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40012c00 	.word	0x40012c00
 8002544:	40000400 	.word	0x40000400

08002548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002548:	b480      	push	{r7}
 800254a:	b087      	sub	sp, #28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f023 0201 	bic.w	r2, r3, #1
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f023 030a 	bic.w	r3, r3, #10
 8002584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
 800258c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	621a      	str	r2, [r3, #32]
}
 800259a:	bf00      	nop
 800259c:	371c      	adds	r7, #28
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b087      	sub	sp, #28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	f023 0210 	bic.w	r2, r3, #16
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	031b      	lsls	r3, r3, #12
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80025e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	621a      	str	r2, [r3, #32]
}
 80025f8:	bf00      	nop
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002602:	b480      	push	{r7}
 8002604:	b085      	sub	sp, #20
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002618:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	f043 0307 	orr.w	r3, r3, #7
 8002624:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	609a      	str	r2, [r3, #8]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002636:	b480      	push	{r7}
 8002638:	b087      	sub	sp, #28
 800263a:	af00      	add	r7, sp, #0
 800263c:	60f8      	str	r0, [r7, #12]
 800263e:	60b9      	str	r1, [r7, #8]
 8002640:	607a      	str	r2, [r7, #4]
 8002642:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002650:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	021a      	lsls	r2, r3, #8
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	431a      	orrs	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	4313      	orrs	r3, r2
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	609a      	str	r2, [r3, #8]
}
 800266a:	bf00      	nop
 800266c:	371c      	adds	r7, #28
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002688:	2302      	movs	r3, #2
 800268a:	e041      	b.n	8002710 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a14      	ldr	r2, [pc, #80]	@ (800271c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d009      	beq.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d8:	d004      	beq.n	80026e4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a10      	ldr	r2, [pc, #64]	@ (8002720 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10c      	bne.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40012c00 	.word	0x40012c00
 8002720:	40000400 	.word	0x40000400

08002724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <memset>:
 8002748:	4603      	mov	r3, r0
 800274a:	4402      	add	r2, r0
 800274c:	4293      	cmp	r3, r2
 800274e:	d100      	bne.n	8002752 <memset+0xa>
 8002750:	4770      	bx	lr
 8002752:	f803 1b01 	strb.w	r1, [r3], #1
 8002756:	e7f9      	b.n	800274c <memset+0x4>

08002758 <__libc_init_array>:
 8002758:	b570      	push	{r4, r5, r6, lr}
 800275a:	2600      	movs	r6, #0
 800275c:	4d0c      	ldr	r5, [pc, #48]	@ (8002790 <__libc_init_array+0x38>)
 800275e:	4c0d      	ldr	r4, [pc, #52]	@ (8002794 <__libc_init_array+0x3c>)
 8002760:	1b64      	subs	r4, r4, r5
 8002762:	10a4      	asrs	r4, r4, #2
 8002764:	42a6      	cmp	r6, r4
 8002766:	d109      	bne.n	800277c <__libc_init_array+0x24>
 8002768:	f000 f81a 	bl	80027a0 <_init>
 800276c:	2600      	movs	r6, #0
 800276e:	4d0a      	ldr	r5, [pc, #40]	@ (8002798 <__libc_init_array+0x40>)
 8002770:	4c0a      	ldr	r4, [pc, #40]	@ (800279c <__libc_init_array+0x44>)
 8002772:	1b64      	subs	r4, r4, r5
 8002774:	10a4      	asrs	r4, r4, #2
 8002776:	42a6      	cmp	r6, r4
 8002778:	d105      	bne.n	8002786 <__libc_init_array+0x2e>
 800277a:	bd70      	pop	{r4, r5, r6, pc}
 800277c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002780:	4798      	blx	r3
 8002782:	3601      	adds	r6, #1
 8002784:	e7ee      	b.n	8002764 <__libc_init_array+0xc>
 8002786:	f855 3b04 	ldr.w	r3, [r5], #4
 800278a:	4798      	blx	r3
 800278c:	3601      	adds	r6, #1
 800278e:	e7f2      	b.n	8002776 <__libc_init_array+0x1e>
 8002790:	080027dc 	.word	0x080027dc
 8002794:	080027dc 	.word	0x080027dc
 8002798:	080027dc 	.word	0x080027dc
 800279c:	080027e0 	.word	0x080027e0

080027a0 <_init>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr

080027ac <_fini>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	bf00      	nop
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr
